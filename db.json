{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1514748788000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1514748788000},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1514748788000},{"_id":"themes/next/_config.yml","hash":"03af15f799e214f5c39e712e377f2a090130c442","modified":1552265712000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1514748788000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1514748788000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1514748788000},{"_id":"source/_posts/Hexo部署github博客.md","hash":"3390d5abf6afb3f293e059e3f02f3348b64a6855","modified":1558513849000},{"_id":"source/_posts/interview-js.md","hash":"ee2dee08699a69c524f8c163447d419a0521d884","modified":1558514703000},{"_id":"source/_posts/interview.md","hash":"d3737197e75f1eca0b186ab81edb4cdd4bd7f9b3","modified":1558514958000},{"_id":"source/_posts/myFirst.md","hash":"09b34dd1a9dd1141df6635c10caf01f172f7ccc2","modified":1558513158000},{"_id":"source/_posts/我的macOS常用软件及配置.md","hash":"2b0ec67e8a82dd9d88e8bdd8cd081a209171e96d","modified":1558577864000},{"_id":"source/about/index.md","hash":"ffa4b326ab3c4a1fccb781fabc1ddcf38ac42107","modified":1558516123000},{"_id":"source/categories/index.md","hash":"5608a954fbbc7c3b1695277dfca4c2aa66ec4823","modified":1552265073000},{"_id":"source/archives/index.md","hash":"4a820d0286f39d6d7e894cb2a895a090a488e3a7","modified":1552039352000},{"_id":"source/tags/index.md","hash":"dd43bfe94eb8a0a1eff45431329a775f0ad744c4","modified":1552265570000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1514748788000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1514748788000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1514748788000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1514748788000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1514748788000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1514748788000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1514748788000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1514748788000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1514748788000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1514748788000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1514748788000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1514748788000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1514748788000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1514748788000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1514748788000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1514748788000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1514748788000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1514748788000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1514748788000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1514748788000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1514748788000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1514748788000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1514748788000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1514748788000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1514748788000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1514748788000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1514748788000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1514748788000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1514748788000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514748788000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514748788000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1514748788000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1514748788000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1514748788000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1514748788000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1514748788000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1514748788000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1514748788000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1514748788000},{"_id":"themes/next/layout/_partials/head.swig","hash":"d8749a56a394127decdce69f0819c9a3faee6f8a","modified":1552038290000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1514748788000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1514748788000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1514748788000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1514748788000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1514748788000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1514748788000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1514748788000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1514748788000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1514748788000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1514748788000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1514748788000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1514748788000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1514748788000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1514748788000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1514748788000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1514748788000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1514748788000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1514748788000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1514748788000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1514748788000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1514748788000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1514748788000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1514748788000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1514748788000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1514748788000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1514748788000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514748788000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514748788000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514748788000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514748788000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1514748788000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1514748788000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514748788000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1514748788000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514748788000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514748788000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514748788000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514748788000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514748788000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1514748788000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1514748788000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1514748788000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1514748788000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1514748788000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1514748788000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1514748788000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1514748788000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1514748788000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1514748788000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514748788000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1514748788000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1514748788000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1514748788000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1514748788000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1514748788000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1514748788000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1514748788000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"48c89274470271d6737f84518a187b8046ba8ddd","modified":1552038744000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1514748788000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1514748788000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1514748788000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1514748788000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1514748788000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1514748788000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514748788000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514748788000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1514748788000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514748788000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514748788000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514748788000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1514748788000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1514748788000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514748788000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514748788000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1514748788000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514748788000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514748788000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1514748788000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514748788000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514748788000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1514748788000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1514748788000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1514748788000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514748788000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514748788000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514748788000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514748788000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514748788000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1514748788000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1514748788000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1514748788000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1514748788000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514748788000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514748788000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514748788000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514748788000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1514748788000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514748788000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1514748788000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514748788000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514748788000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514748788000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514748788000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1514748788000},{"_id":"public/about/index.html","hash":"ac24c7af2d8adae3ee8a628ca7aab9badb75389c","modified":1558517459633},{"_id":"public/categories/index.html","hash":"adfed6bb1858325bca65acc238b392888ca99979","modified":1558517459633},{"_id":"public/archives/index.html","hash":"e0104d4951c9992f5ad49ad3ff7ac21920edd64f","modified":1558517459634},{"_id":"public/tags/index.html","hash":"fb75f8f9193eae19c623f47a0c3df0fea0aa159f","modified":1558517459634},{"_id":"public/2019/03/11/myFirst/index.html","hash":"e12cbe37f17ab6b255dac9158a9a6214263268c2","modified":1558517459634},{"_id":"public/archives/2019/index.html","hash":"f2feb71283c6184e571867b77ada31cc82144019","modified":1558517459635},{"_id":"public/archives/2019/03/index.html","hash":"1ddeffcf778ae7cd3d28201d2b078255eee69ce1","modified":1558517459635},{"_id":"public/archives/2019/05/index.html","hash":"23aaa85238a0f06aef7c5725d392f2fb64a36b53","modified":1558517459635},{"_id":"public/categories/hexo/index.html","hash":"c6d21a89e246a2348f8a23071abb38d9fc17a9bc","modified":1558517459635},{"_id":"public/categories/笔记/index.html","hash":"bc8cedac9dd2d7358f5e2b324e0bc76518f57c85","modified":1558517459635},{"_id":"public/categories/随笔/index.html","hash":"a5efd53c1728a7f9fddf20ad79def0c3657d729b","modified":1558517459635},{"_id":"public/tags/hexo/index.html","hash":"bccb8e37dcafb909ecf25e569a9b550d8a19aa58","modified":1558517459635},{"_id":"public/tags/技术/index.html","hash":"d09e88b465826c79538b02acc24d869c2dd00f1f","modified":1558517459635},{"_id":"public/tags/笔记/index.html","hash":"136ff260514882cde96f0b1591795e019420d126","modified":1558517459635},{"_id":"public/tags/面试/index.html","hash":"2c7fe33ab25d931b32cc89d22c1952fb921f0d1a","modified":1558517459635},{"_id":"public/tags/情感/index.html","hash":"ec0bed0c5fcf64770f400219b43c40c828cd39be","modified":1558517459635},{"_id":"public/tags/javascript/index.html","hash":"70559d8124d04d9b99de9656fbdf5d02853d2963","modified":1558517459635},{"_id":"public/2019/05/22/interview-js/index.html","hash":"bc6e09fd239ee85ae692cd73fb4fb896e2873e90","modified":1558517459635},{"_id":"public/2019/05/22/interview/index.html","hash":"8b93a0acc1e9f6e0bef2bd6ad801a38eaf0e8ac4","modified":1558517459636},{"_id":"public/2019/05/22/Hexo部署github博客/index.html","hash":"81f83e5c49dd7bd1415da899beddcab06d1c9763","modified":1558517459636},{"_id":"public/index.html","hash":"ad6f3c3e80db01ca911c8e6a022582fa04914065","modified":1558517459636},{"_id":"public/lib/blog-encrypt.js","hash":"24b097141e36e24d93a30894eecb94307185141d","modified":1558517459636},{"_id":"public/tags/配置/index.html","hash":"741543b11106fe3dad000695e5aa9534628d02a9","modified":1558517459672},{"_id":"public/2019/05/22/我的macOS常用软件及配置/index.html","hash":"e733267b17bcfd6b9b2d2a050f3930b141b99223","modified":1558577896388},{"_id":"public/tags/软件下载/index.html","hash":"ac40179cb4b1fc9c8514f752e9f471dcf847111d","modified":1558517459674},{"_id":"public/css/blog-encrypt.css","hash":"262922c3f49cb8cca7b3ea982c49b57de2af53d6","modified":1558517459674},{"_id":"public/lib/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1558517459677}],"Category":[{"name":"hexo","_id":"cjvz0jeh80004yrwm5f70e5x4"},{"name":"笔记","_id":"cjvz0jehf000ayrwm3yv9wyuv"},{"name":"随笔","_id":"cjvz0jehi000hyrwm82hjthh3"}],"Data":[],"Page":[{"title":"关于","date":"2019-03-08T10:02:18.000Z","_content":"\n> 欢迎来到 Chenggr 的技术博客，一个记录与分享的地方~\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2019-03-08 18:02:18\n---\n\n> 欢迎来到 Chenggr 的技术博客，一个记录与分享的地方~\n","updated":"2019-05-22T09:08:43.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjvz0jeh30001yrwmalklmxkf","content":"<blockquote>\n<p>欢迎来到 Chenggr 的技术博客，一个记录与分享的地方~</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>欢迎来到 Chenggr 的技术博客，一个记录与分享的地方~</p>\n</blockquote>\n"},{"title":"categories","date":"2019-03-08T10:02:26.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-03-08 18:02:26\ntype: 'categories'\n---\n","updated":"2019-03-11T00:44:33.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjvz0jeh70003yrwmgk0zwa25","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"archives","date":"2019-03-08T10:02:32.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-03-08 18:02:32\n---\n","updated":"2019-03-08T10:02:32.000Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cjvz0jehc0007yrwmihyjamz2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-03-08T10:00:16.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-03-08 18:00:16\ntype: 'tags'\n---\n","updated":"2019-03-11T00:52:50.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjvz0jem00014yrwm4evwiqje","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hexo常用命令","date":"2019-05-22T06:46:14.000Z","type":"categories","_content":"\n> 我的 Hexo 常用命令\n\n<!--more-->\n\n### 安装 Hexo\n\n```javascript\n// 安装命令\nnpm install -g hexo-cli\n```\n\n### Hexo 关联 github\n\n```javascript\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/username/username.github.io\n  branch: master\n```\n\n### 创建本地博文服务\n\n```javascript\n// 启动博文站点\nhexo server\n```\n\n访问 http://localhost:4000 就能打开博文了\nCtrl+C 关闭服务器\n\n### 使用 Hexo 创建和发布文章\n\n```javascript\n// 进入 hexo-blog 根目录\n// 创建文章命令：\nhexo new \"文章标题\"\n```\n\n### 发布上传\n\n```javascript\nhexo clean\nhexo generate\nhexo deploy\n```\n\n### 完成后部署\n\n您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。\n\n```javascript\nhexo generate --deploy\nhexo deploy --generate\n```\n\n#### 简写\n\n上面两个命令可以简写为:\n\n```javascript\nhexo g -d\nhexo d -g\n```\n","source":"_posts/Hexo部署github博客.md","raw":"---\ntitle: Hexo常用命令\ndate: 2019-05-22 14:46:14\ntags:\n  - hexo\n  - 技术\ncategories: hexo\ntype: 'categories'\n---\n\n> 我的 Hexo 常用命令\n\n<!--more-->\n\n### 安装 Hexo\n\n```javascript\n// 安装命令\nnpm install -g hexo-cli\n```\n\n### Hexo 关联 github\n\n```javascript\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/username/username.github.io\n  branch: master\n```\n\n### 创建本地博文服务\n\n```javascript\n// 启动博文站点\nhexo server\n```\n\n访问 http://localhost:4000 就能打开博文了\nCtrl+C 关闭服务器\n\n### 使用 Hexo 创建和发布文章\n\n```javascript\n// 进入 hexo-blog 根目录\n// 创建文章命令：\nhexo new \"文章标题\"\n```\n\n### 发布上传\n\n```javascript\nhexo clean\nhexo generate\nhexo deploy\n```\n\n### 完成后部署\n\n您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。\n\n```javascript\nhexo generate --deploy\nhexo deploy --generate\n```\n\n#### 简写\n\n上面两个命令可以简写为:\n\n```javascript\nhexo g -d\nhexo d -g\n```\n","slug":"Hexo部署github博客","published":1,"updated":"2019-05-22T08:30:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvz0jegz0000yrwmgkryst1z","content":"<blockquote>\n<p>我的 Hexo 常用命令</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安装命令</span></span><br><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h3 id=\"Hexo-关联-github\"><a href=\"#Hexo-关联-github\" class=\"headerlink\" title=\"Hexo 关联 github\"></a>Hexo 关联 github</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: http://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: https:<span class=\"comment\">//github.com/username/username.github.io</span></span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建本地博文服务\"><a href=\"#创建本地博文服务\" class=\"headerlink\" title=\"创建本地博文服务\"></a>创建本地博文服务</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 启动博文站点</span></span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>访问 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a> 就能打开博文了<br>Ctrl+C 关闭服务器</p>\n<h3 id=\"使用-Hexo-创建和发布文章\"><a href=\"#使用-Hexo-创建和发布文章\" class=\"headerlink\" title=\"使用 Hexo 创建和发布文章\"></a>使用 Hexo 创建和发布文章</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 进入 hexo-blog 根目录</span></span><br><span class=\"line\"><span class=\"comment\">// 创建文章命令：</span></span><br><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">\"文章标题\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"发布上传\"><a href=\"#发布上传\" class=\"headerlink\" title=\"发布上传\"></a>发布上传</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<h3 id=\"完成后部署\"><a href=\"#完成后部署\" class=\"headerlink\" title=\"完成后部署\"></a>完成后部署</h3><p>您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate --deploy</span><br><span class=\"line\">hexo deploy --generate</span><br></pre></td></tr></table></figure>\n<h4 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h4><p>上面两个命令可以简写为:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g -d</span><br><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>我的 Hexo 常用命令</p>\n</blockquote>","more":"<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安装命令</span></span><br><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h3 id=\"Hexo-关联-github\"><a href=\"#Hexo-关联-github\" class=\"headerlink\" title=\"Hexo 关联 github\"></a>Hexo 关联 github</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: http://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: https:<span class=\"comment\">//github.com/username/username.github.io</span></span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建本地博文服务\"><a href=\"#创建本地博文服务\" class=\"headerlink\" title=\"创建本地博文服务\"></a>创建本地博文服务</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 启动博文站点</span></span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>访问 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a> 就能打开博文了<br>Ctrl+C 关闭服务器</p>\n<h3 id=\"使用-Hexo-创建和发布文章\"><a href=\"#使用-Hexo-创建和发布文章\" class=\"headerlink\" title=\"使用 Hexo 创建和发布文章\"></a>使用 Hexo 创建和发布文章</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 进入 hexo-blog 根目录</span></span><br><span class=\"line\"><span class=\"comment\">// 创建文章命令：</span></span><br><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">\"文章标题\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"发布上传\"><a href=\"#发布上传\" class=\"headerlink\" title=\"发布上传\"></a>发布上传</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<h3 id=\"完成后部署\"><a href=\"#完成后部署\" class=\"headerlink\" title=\"完成后部署\"></a>完成后部署</h3><p>您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate --deploy</span><br><span class=\"line\">hexo deploy --generate</span><br></pre></td></tr></table></figure>\n<h4 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h4><p>上面两个命令可以简写为:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g -d</span><br><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>"},{"title":"interview-js","date":"2019-05-22T08:38:02.000Z","type":"categories","_content":"\n> imooc 的 javascript 笔记\n\n<!--more-->\n\n# 原型规则和示例\n\n- 所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（除了“null”以外）\n- 所有的引用类型（数组、对象、函数），都有一个 ** proto ** (隐式原型)属性，属性值是一个普通的对象\n- 所有的函数，都有一个 prototype(显示原型)属性，属性值也是一个普通对象\n- 所有的引用类型（数组、对象、函数），** proto ** (隐式原型)属性值指向它的构造函数的“prototype”(显示类型)属性值 **obj. ** porto ** === Object.prototype**\n- 当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的 ** proto **(即它的构造函数的 prototype)中寻找\n\n# 作用域和闭包\n\n执行上下文\n\nthis\n\n作用域\n\n作用域链\n\n闭包\n\n## 执行上下文\n\n范围：一段 < script > 或者一个函数\n\n全局：变量定义、函数声明\n\n函数：变量定义、函数声明、this、arguments\n\nPs：函数声明 和 函数表达式 的区别\n\n## this\n\nthis 要执行时才能确认值，定义时无法确认\n\n```javascript\nvar a = {\n  name: 'A',\n  fn: function() {\n    console.log(this.name)\n  }\n}\na.fn() // this === a\na.fn.call({ name: 'B' }) // this === {name: 'B'}\nvar fn1 = a.fn\nfn1() // this === window\n```\n\n- 作为构造函数执行\n- 作为对象属性执行\n- 作为普通函数执行\n- call apply bind\n\n```javascript\nfunction Foo(name) {\n  this.name = name\n}\nvar f = new Foo('zhangsan')\n```\n\n```javascript\nvar obj = {\n  name: 'A',\n  printName: function() {\n    console.log(this.name)\n  }\n}\nobj.printName() // this === obj\n```\n\n```javascript\nfunction fn() {\n  console.log(this) // this === window\n}\nfn()\n```\n\n```javascript\n// call apply bind\nfunction fn1(name, age) {\n  alert(name)\n  console.log(this)\n}\nfn1.call({ x: 100 }, 'zhangsan', 20) // this === {x:100}\nfn1.apply({ x: 100 }, ['zhangsan', 20])\n\nvar fn2 = function(name, age) {\n  alert(name)\n  console.log(this)\n}.bind({ y: 200 })\nfn2('zhangsan', 20)\n```\n\n作用域\n\n- 没有块级作用域\n\n- 只有函数和全局作用域\n\n  ​\n\n```javascript\n// 无块级作用域\nif (true) {\n  var name = 'zhangsan'\n}\nconsole.log(name)\n\n// 函数和全局作用域\nvar a = 100\nfunction fn() {\n  var a = 200\n  console.log('fn', a)\n}\nconsole.log('global', a)\nfn()\n```\n\n作用域链\n\n```javascript\nvar a = 100\nfunction fn() {\n  var b = 200\n\n  // 当前作用域没有定义的变量，即“自由变量”\n  console.log(a)\n  console.log(b)\n}\nfn()\n```\n\n```javascript\nvar a = 100\nfunction F1() {\n  var b = 200\n  function F2() {\n    var c = 300\n    console.log(a) // a是自由变量\n    console.log(b) // b是自由变量\n    console.log(c)\n  }\n  F2()\n}\nF1()\n```\n\n## 闭包的使用场景\n\n- 函数作为返回值\n- 函数作为参数传递\n\n```javascript\nfunction F1() {\n  var a = 100\n  // 返回一个函数(函数作为返回值)\n  return function() {\n    console.log(a) // 自由变量，父级作用域寻找\n  }\n}\n// f1 得到一个函数\nvar f1 = F1()\nvar a = 200\nf1()\n\n// 1.函数作为返回值 ↑\n// 2.函数作为参数来传递 ↓\nfunction F1() {\n  var a = 100\n  return function() {\n    console.log(a)\n  }\n}\nvar f1 = F1()\nfunction F2(fn) {\n  var a = 200\n  fn()\n}\nF2(f1)\n```\n\n### 创建 10 个<a>标签，点击的时候弹出对应的序号\n\n```javascript\nvar i\nfor (i = 0; i < 10; i++) {\n  ;(function(i) {\n    var a = document.createElement('a')\n    a.innerHTML = i + '<br>'\n    a.addEventListener('click', function(e) {\n      e.preventDefault()\n      alert(i)\n    })\n    document.body.appendChild(a)\n  })(i)\n}\n```\n\n### 闭包的应用\n\n```javascript\n// 闭包实际开发中主要用于封装变量，收敛权限\nfunction isFirstLoad() {\n  var _list = []\n  return function(id) {\n    if (_list.indexOf(id) >= 0) {\n      return false\n    } else {\n      _list.push(id)\n      return true\n    }\n  }\n}\n// 使用  判断是否第一次\nvar firstLoad = isFirstLoad()\nfirstLoad(10) // true\nfirstLoad(10) // false\nfirstLoad(20) // true\n```\n\n# 异步和单线程\n\n## 同步和异步的区别是什么\n\n同步会阻塞代码执行，而异步不会\n\nalert 是同步，setTimeout 是异步\n\n## 前端使用异步的场景有哪些\n\n定时任务：setTimeout、setInterval\n\n网络请求：ajax 请求，动态<img>加载\n\n事件绑定\n\n# 日期\n\n```javascript\nDate.now() // 获取当前时间毫秒数\nvar dt = new Date()\ndt.getTime() // 获取毫秒数\ndt.getFullYear() // 年\ndt.getMonth() // 月(0-11)\ndt.getDate() // 日(1-31)\ndt.getHours() // 小时(0-23)\ndt.getMinutes() // 分钟(0-59)\ndt.getSeconds() // 秒(0-59)\n```\n\n# 数组 API\n\n## forEach\n\n```javascript\nvar arr = [1, 2, 3]\narr.forEach(function(item, index) {\n  //  遍历数组的所有元素\n  console.log(index, item)\n})\n```\n\n## every\n\n```javascript\nvar arr = [1, 2, 3]\nvar result = arr.every(function(item, index) {\n  // 用来判断所有的数组元素，都满足一个条件\n  if (item < 4) {\n    return true\n  }\n})\nconsole.log(result)\n```\n\n## some\n\n```javascript\nvar arr = [1, 2, 3]\nvar result = arr.some(function(item, index) {\n  // 用来判断只要有一个数组元素满足条件\n  if (item < 1) {\n    return true\n  }\n})\nconsole.log(result)\n```\n\n## sort\n\n```javascript\nvar arr = [1, 3, 2, 3, 5]\nvar arr2 = arr.sort(function(a, b) {\n  // 从小到大排序\n  return a - b\n  // 从大到小排序\n  // return b - a\n})\nconsole.log(arr)\nconsole.log(arr2)\n```\n\n## map\n\n```javascript\nvar arr = [1, 2, 3, 4]\nvar arr2 = arr.map(function(item, index) {\n  // 将元素重新组装，并返回\n  return '<b>' + item + '</b>'\n})\nconsole.log(arr2)\n```\n\n## filter\n\n```javascript\nvar arr = [1, 2, 3]\nvar arr2 = arr.filter(function(item, index) {\n  // 通过某一个条件过滤数组\n  if (item >= 2) {\n    return true\n  }\n})\nconsole.log(arr2)\n```\n\n# 对象 API\n\n```javascript\nvar obj = {\n  x: 100,\n  y: 200,\n  z: 300\n}\nvar key\nfor (key in obj) {\n  if (obj.hasOwnProperty(key)) {\n    console.log(key, obj[key])\n  }\n}\n```\n\n**获取随机数，要求是长度一致的字符串格式**\n\n```javascript\nvar random = Math.random()\nvar random = random + '0000000000' // 后面加上10个零\nvar random = random.slice(0, 10)\nconsole.log(random)\n```\n\n**一个能遍历对象和数组的 forEach 函数**\n\n```javascript\n// 自定义forEach\nfunction forEach(obj, fn) {\n  var key\n  if (obj instanceof Array) {\n    obj.forEach(function(item, index) {\n      fn(index, item)\n    })\n  } else {\n    for (key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        fn(key, obj[key])\n      }\n    }\n  }\n}\n// 使用forEach\n// 遍历数组\nvar arr = [1, 2, 3]\n// 注意,这里参数的位置顺序换了，为了和对象遍历格式一致\nforEach(arr, function(index, item) {\n  console.log(index, item)\n})\n// 遍历对象\nvar obj = { x: 100, y: 200 }\nforEach(obj, function(key, value) {\n  console.log(key, value)\n})\n```\n\n# DOM\n\n## 获取 DOM 节点\n\n```javascript\nvar div1 = document.getElementById('div1') //元素\nvar divList = document.getElementsByTagName('div') // 集合\n\nvar containerList = document.getElementByClassName('.container') // 集合\nvar pList = document.querySelectorAll('p') // 集合\n```\n\n## property\n\n```javascript\nvar obj = { x: 100, y: 200 }\nconsole.log(obj.x) // 100\n\nvar p = document.getElementsByTagName('p')[0]\nconsole.log(p.nodeName) // P\n```\n\n## Attribute\n\n```javascript\nvar pList = document.querySelectorAll('p')\nvar p = pList[0]\np.getAttribute('data-name')\np.setAttribute('data-name', 'imooc')\np.getAttribute('style')\np.setAttribute('style', 'font-size:30px')\n```\n\nproperty 只是一个 js 对象的属性的修改\n\nAttribute 是对 HTML 标签属性的修改\n\n## 新增节点\n\n```javascript\nvar div1 = document.getElementById('div1')\n// 添加新节点\nvar p1 = document.createElement('p')\np1.innerHTML = 'this is p1'\ndiv1.appendChild(p1) // 添加新创建的元素\n// 移动已有节点\nvar p2 = document.getElementById('p2')\ndiv1.appendChild(p2)\n```\n\n## 获取父元素和子元素\n\n```javascript\nvar div1 = document.getElementById('div1')\nvar parent = div1.parentElement\n\nvar child = div1.childNodes\n```\n\n## 删除节点\n\n```javascript\nvar div1 = document.getElementById('div1')\nvar child = div1.childNodes\ndiv1.removeChild(child[0])\n```\n\n# BOM\n\n## navigator & screen\n\n```javascript\n// navigator\nvar ua = navigator.userAgent\nvar isChrome = ua.indexOf('Chrome')\nconsole.log(isChrome)\n\n// screen\nconsole.log(screen.width)\nconsole.log(screen.height)\n```\n\n## location & history\n\n```javascript\n// location\nconsole.log(location.href)\nconsole.log(location.protocol) // 'http:' 'https:'\nconsole.log(location.host) //  域名\nconsole.log(location.pathname) // '/learn/199'\nconsole.log(location.search) // '?a=xxx'\nconsole.log(location.hash) // '#...'\n\n// history\nhistory.back()\nhistory.forward()\n```\n\n# 事件\n\n## 通用事件绑定\n\n```javascript\nvar btn = document.getElementById('btn1')\nbtn.addEventListener('click', function(event) {\n  console.log('clicked')\n})\n\nfunction bindEvent(elem, type, fn) {\n  elem.addEventListener(type, fn)\n}\nvar a = document.getElementById('link1')\nbindEvent(a, 'click', function(e) {\n  e.preventDefault() //阻止默认行为\n  alert('clicked')\n})\n```\n\n关于 IE 低版本的兼容性\n\nIE 低版本使用 attachEvent 绑定事件，和 W3C 标准不一样\n\nIE 低版本使用量已非常少，很多网站都早已不支持\n\n## 代理\n\n```html\n<div id=\"div1\">\n  <a href=\"#\">a1</a>\n  <a href=\"#\">a2</a>\n  <a href=\"#\">a3</a>\n  <!-- 会随时新增更多a标签 -->\n</div>\n\n<script>\n  var div1 = document.getElementById('div1')\n  div1.addEventListener('click', function(e) {\n    var target = e.target\n    if (target.nodeName === 'A') {\n      alert(target.innerHTML)\n    }\n  })\n</script>\n```\n\n## 完善通用绑定事件的函数\n\n```javascript\nfunction bindEvent(elem, type, selector, fn) {\n  if (fn == null) {\n    fn = selector\n    selector = null\n  }\n  elem.addEventListener(type, function(e) {\n    var target\n    // 代理\n    if (selector) {\n      target = e.target\n      if (target.matches(selector)) {\n        fn.call(target, e)\n      }\n    } else {\n      // 不是代理\n      fn(e)\n    }\n  })\n}\n\n// 使用代理\nvar div1 = document.getElementById('div1')\nbindEvent(div1, 'click', 'a', function(e) {\n  console.log(this.innerHTML)\n})\n\n// 不使用代理\nvar a = document.getElementById('a1')\nbindEvent(div1, 'click', function(e) {\n  console.log(a.innerHTML)\n})\n```\n\n# Ajax\n\n## XMLHttpRequest\n\n```javascript\nvar xhr = new XMLHttpRequest()\nXhr.open('GET', '/api', false) // false指异步\nXhr.onreadystatechange = function() {\n  // 这里的函数异步执行\n  if (xhr.readyState == 4) {\n    if (xhr.status == 200) {\n      console.log(xhr.responseText)\n    }\n  }\n}\nxhr.send(null)\n```\n\nIE 低版本使用 ActiveXObject\n\n## readyState\n\n0 - (未初始化) 还没用调用 send()方法\n\n1 - (载入) 已调用 send()方法，正在发送请求\n\n2 - (载入完成) send()方法执行完成，已经接收到全部响应内容\n\n3 - (交互) 正在解析响应内容\n\n4 - (完成) 响应内容解析完成，可以在客户端调用了\n\n## status\n\n2xx - 表示成功处理请求。 如 200\n\n3xx - 需要重定向，浏览器直接跳转\n\n4xx - 客户端请求错误，如 404\n\n5xx - 服务端错误\n\n# 跨域\n\n浏览器有同源策略，不允许 ajax 访问其他域接口\n\n跨域条件：协议、域名、端口，有一个不同就算跨域\n\n## 允许跨域的三个标签\n\nimg\n\nlink\n\nscript\n\n<img> 用于打点统计，统计网站可能是其他域\n\n<link><script> 可以使用CDN,CDN的也是其他域\n\n<script>可以用于JSONP\n\n\n\n## 跨域注意事项\n\n所有的跨域请求都必须经过信息提供方允许\n\n如果未经允许即可获取，那是浏览器同源策略出现漏洞\n\n\n\n## JSONP实现原理\n\n加载http://coding.m.imooc.com/classindex.html\n\n不一定服务器端存在一个classindex.html文件\n\n服务器跨域根据请求，动态生成一个文件，返回\n\n同理于 <script src=\"http://coding.m.imooc.com/api.js\">\n\n\n\n例如你的网站要跨域访问慕课网的一个接口\n\n慕课给你一个地址http://coding.m.imooc.com/api.js\n\n返回内容格式如 callback({x:100,y:200}) (可动态生成)\n\n```javascript\nwindow.callback = function(data) {\n    // 这是我们跨域得到的信息\n  \tconsole.log(data)\n}\n<script src=\"http://coding.m.imooc.com/api.js\"></script>\n<!-- 以上将返回 callback({x:100,y:200}) -->\n\n````\n\n\n\n# 存储\n\n描述一下cookie,sessionStorage和localStorage的区别\n\n## cookie\n\n本身用于客户端和服务器端通信\n\n但是它有本地存储的功能，于是就被“借用”\n\n使用document.cookie = … 获取和修改\n\n\n\n**cookie用于存储的缺点**\n\n存储量太小，只有4KB\n\n所有http请求都带有，会影响获取资源的效率\n\nAPI简单，需要封装才能用 document.cookie = ...\n\n\n\n## sessionStorage和localStorage的\n\nHTML5专门为存储而设计，最大容量5M\n\nAPI简答易用\n\nlocalStorage.setItem(key, value); localStorage.getItem(key)\n\n\n\n\n\n\n\n# 页面加载\n\n## 加载一个资源的过程\n\n浏览器根据DNS服务器得到域名的IP地址\n\n向这个IP的机器发送http(或https)请求\n\n服务器收到、处理并返回http(或https)请求\n\n浏览器得到返回内容\n\n## 浏览器渲染页面的过程\n\n根据HTML结果生成DOM Tree\n\n根据CSS生成CSSOM\n\n将DOM和CSSOM整合成RenderTree\n\n根据RenderTree开始渲染和展示\n\n遇到<script>时，会执行并阻塞渲染\n\n\n\n## window.onload 和 DOMContentLoaded\n\n```javascript\nwindow.addEventListener('load',function () {\n    // 页面的全部资源加载完才会执行，包括图片、视频等\n})\ndocument.addEventListener('DOMContentLoaded', function () {\n    // DOM渲染完即可执行，此时图片、视频还可能没有加载完\n})\n````\n\n# 性能优化\n\n**原则**\n\n多使用内存、缓存或者其他方法\n\n减少 CPU 计算、减少网络请求\n\n**从哪里入手**\n\n加载页面和静态资源\n\n页面渲染\n\n**加载资源优化**\n\n静态资源的压缩合并\n\n静态资源缓存\n\n使用 CDN 让资源加载更快\n\n使用 SSR 后端渲染，数据直接输出到 HTML 中\n\n**渲染优化**\n\nCSS 放前面、JS 放后面\n\n懒加载(图片懒加载、下拉加载更多)\n\n减少 DOM 查询，对 DOM 查询做缓存\n\n减少 DOM 操作，多个操作尽量合并在一起执行\n\n事件节流\n\n尽早执行操作（如 DOMContentLoaded）\n\n## 缓存 DOM 查询\n\n```javascript\n// 未缓存DOM查询\nvar i\nfor (i = 0; i < document.getElementByTagName('p').length; i++) {\n  // todo\n}\n\n// 缓存了DOM查询\nvar pList = document.getElementByTagName('p')\nvar i\nfor (i = 0; i < pList.length; i++) {\n  //todo\n}\n```\n\n## 合并 DOM 插入\n\n```javascript\nvar listNode = document.getElementById('list')\n\n// 要插入 10 个 li 标签\nvar frag = document.createDocumentFragment()\nvar x, li\nfor (x = 0; x < 10; x++) {\n  li = document.createElement('li')\n  li.innerHTML = 'List item' + x\n  frag.appendChild(li)\n}\nlistNode.appendChild(frag)\n```\n\n## 事件节流\n\n```javascript\nvar textarea = document.getElementById('text')\nvar timeoutId\ntextarea.addEventListener('keyup', function() {\n  if (timeoutId) {\n    clearTimeout(timeoutId)\n  }\n  timeoutId = setTimeout(function() {\n    // 触发 change 事件\n  }, 100)\n})\n```\n\n## 尽早操作\n\n```javascript\nwindow.addEventListener('load', function() {\n  // 页面的全部资源加载完才会执行，包括图片、视频等\n})\ndocument.addEventListener('DOMContentLoaded', function() {\n  // DOM渲染完即可执行，此时图片、视频还可能没有加载完\n})\n```\n\n# 安全性\n\nXSS 跨站请求攻击\n\nXSRF 跨站请求伪造\n","source":"_posts/interview-js.md","raw":"---\ntitle: interview-js\ndate: 2019-05-22 16:38:02\ntags:\n  - javascript\n  - 技术\n  - 面试\n  - 笔记\ncategories: 笔记\ntype: 'categories'\n---\n\n> imooc 的 javascript 笔记\n\n<!--more-->\n\n# 原型规则和示例\n\n- 所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（除了“null”以外）\n- 所有的引用类型（数组、对象、函数），都有一个 ** proto ** (隐式原型)属性，属性值是一个普通的对象\n- 所有的函数，都有一个 prototype(显示原型)属性，属性值也是一个普通对象\n- 所有的引用类型（数组、对象、函数），** proto ** (隐式原型)属性值指向它的构造函数的“prototype”(显示类型)属性值 **obj. ** porto ** === Object.prototype**\n- 当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的 ** proto **(即它的构造函数的 prototype)中寻找\n\n# 作用域和闭包\n\n执行上下文\n\nthis\n\n作用域\n\n作用域链\n\n闭包\n\n## 执行上下文\n\n范围：一段 < script > 或者一个函数\n\n全局：变量定义、函数声明\n\n函数：变量定义、函数声明、this、arguments\n\nPs：函数声明 和 函数表达式 的区别\n\n## this\n\nthis 要执行时才能确认值，定义时无法确认\n\n```javascript\nvar a = {\n  name: 'A',\n  fn: function() {\n    console.log(this.name)\n  }\n}\na.fn() // this === a\na.fn.call({ name: 'B' }) // this === {name: 'B'}\nvar fn1 = a.fn\nfn1() // this === window\n```\n\n- 作为构造函数执行\n- 作为对象属性执行\n- 作为普通函数执行\n- call apply bind\n\n```javascript\nfunction Foo(name) {\n  this.name = name\n}\nvar f = new Foo('zhangsan')\n```\n\n```javascript\nvar obj = {\n  name: 'A',\n  printName: function() {\n    console.log(this.name)\n  }\n}\nobj.printName() // this === obj\n```\n\n```javascript\nfunction fn() {\n  console.log(this) // this === window\n}\nfn()\n```\n\n```javascript\n// call apply bind\nfunction fn1(name, age) {\n  alert(name)\n  console.log(this)\n}\nfn1.call({ x: 100 }, 'zhangsan', 20) // this === {x:100}\nfn1.apply({ x: 100 }, ['zhangsan', 20])\n\nvar fn2 = function(name, age) {\n  alert(name)\n  console.log(this)\n}.bind({ y: 200 })\nfn2('zhangsan', 20)\n```\n\n作用域\n\n- 没有块级作用域\n\n- 只有函数和全局作用域\n\n  ​\n\n```javascript\n// 无块级作用域\nif (true) {\n  var name = 'zhangsan'\n}\nconsole.log(name)\n\n// 函数和全局作用域\nvar a = 100\nfunction fn() {\n  var a = 200\n  console.log('fn', a)\n}\nconsole.log('global', a)\nfn()\n```\n\n作用域链\n\n```javascript\nvar a = 100\nfunction fn() {\n  var b = 200\n\n  // 当前作用域没有定义的变量，即“自由变量”\n  console.log(a)\n  console.log(b)\n}\nfn()\n```\n\n```javascript\nvar a = 100\nfunction F1() {\n  var b = 200\n  function F2() {\n    var c = 300\n    console.log(a) // a是自由变量\n    console.log(b) // b是自由变量\n    console.log(c)\n  }\n  F2()\n}\nF1()\n```\n\n## 闭包的使用场景\n\n- 函数作为返回值\n- 函数作为参数传递\n\n```javascript\nfunction F1() {\n  var a = 100\n  // 返回一个函数(函数作为返回值)\n  return function() {\n    console.log(a) // 自由变量，父级作用域寻找\n  }\n}\n// f1 得到一个函数\nvar f1 = F1()\nvar a = 200\nf1()\n\n// 1.函数作为返回值 ↑\n// 2.函数作为参数来传递 ↓\nfunction F1() {\n  var a = 100\n  return function() {\n    console.log(a)\n  }\n}\nvar f1 = F1()\nfunction F2(fn) {\n  var a = 200\n  fn()\n}\nF2(f1)\n```\n\n### 创建 10 个<a>标签，点击的时候弹出对应的序号\n\n```javascript\nvar i\nfor (i = 0; i < 10; i++) {\n  ;(function(i) {\n    var a = document.createElement('a')\n    a.innerHTML = i + '<br>'\n    a.addEventListener('click', function(e) {\n      e.preventDefault()\n      alert(i)\n    })\n    document.body.appendChild(a)\n  })(i)\n}\n```\n\n### 闭包的应用\n\n```javascript\n// 闭包实际开发中主要用于封装变量，收敛权限\nfunction isFirstLoad() {\n  var _list = []\n  return function(id) {\n    if (_list.indexOf(id) >= 0) {\n      return false\n    } else {\n      _list.push(id)\n      return true\n    }\n  }\n}\n// 使用  判断是否第一次\nvar firstLoad = isFirstLoad()\nfirstLoad(10) // true\nfirstLoad(10) // false\nfirstLoad(20) // true\n```\n\n# 异步和单线程\n\n## 同步和异步的区别是什么\n\n同步会阻塞代码执行，而异步不会\n\nalert 是同步，setTimeout 是异步\n\n## 前端使用异步的场景有哪些\n\n定时任务：setTimeout、setInterval\n\n网络请求：ajax 请求，动态<img>加载\n\n事件绑定\n\n# 日期\n\n```javascript\nDate.now() // 获取当前时间毫秒数\nvar dt = new Date()\ndt.getTime() // 获取毫秒数\ndt.getFullYear() // 年\ndt.getMonth() // 月(0-11)\ndt.getDate() // 日(1-31)\ndt.getHours() // 小时(0-23)\ndt.getMinutes() // 分钟(0-59)\ndt.getSeconds() // 秒(0-59)\n```\n\n# 数组 API\n\n## forEach\n\n```javascript\nvar arr = [1, 2, 3]\narr.forEach(function(item, index) {\n  //  遍历数组的所有元素\n  console.log(index, item)\n})\n```\n\n## every\n\n```javascript\nvar arr = [1, 2, 3]\nvar result = arr.every(function(item, index) {\n  // 用来判断所有的数组元素，都满足一个条件\n  if (item < 4) {\n    return true\n  }\n})\nconsole.log(result)\n```\n\n## some\n\n```javascript\nvar arr = [1, 2, 3]\nvar result = arr.some(function(item, index) {\n  // 用来判断只要有一个数组元素满足条件\n  if (item < 1) {\n    return true\n  }\n})\nconsole.log(result)\n```\n\n## sort\n\n```javascript\nvar arr = [1, 3, 2, 3, 5]\nvar arr2 = arr.sort(function(a, b) {\n  // 从小到大排序\n  return a - b\n  // 从大到小排序\n  // return b - a\n})\nconsole.log(arr)\nconsole.log(arr2)\n```\n\n## map\n\n```javascript\nvar arr = [1, 2, 3, 4]\nvar arr2 = arr.map(function(item, index) {\n  // 将元素重新组装，并返回\n  return '<b>' + item + '</b>'\n})\nconsole.log(arr2)\n```\n\n## filter\n\n```javascript\nvar arr = [1, 2, 3]\nvar arr2 = arr.filter(function(item, index) {\n  // 通过某一个条件过滤数组\n  if (item >= 2) {\n    return true\n  }\n})\nconsole.log(arr2)\n```\n\n# 对象 API\n\n```javascript\nvar obj = {\n  x: 100,\n  y: 200,\n  z: 300\n}\nvar key\nfor (key in obj) {\n  if (obj.hasOwnProperty(key)) {\n    console.log(key, obj[key])\n  }\n}\n```\n\n**获取随机数，要求是长度一致的字符串格式**\n\n```javascript\nvar random = Math.random()\nvar random = random + '0000000000' // 后面加上10个零\nvar random = random.slice(0, 10)\nconsole.log(random)\n```\n\n**一个能遍历对象和数组的 forEach 函数**\n\n```javascript\n// 自定义forEach\nfunction forEach(obj, fn) {\n  var key\n  if (obj instanceof Array) {\n    obj.forEach(function(item, index) {\n      fn(index, item)\n    })\n  } else {\n    for (key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        fn(key, obj[key])\n      }\n    }\n  }\n}\n// 使用forEach\n// 遍历数组\nvar arr = [1, 2, 3]\n// 注意,这里参数的位置顺序换了，为了和对象遍历格式一致\nforEach(arr, function(index, item) {\n  console.log(index, item)\n})\n// 遍历对象\nvar obj = { x: 100, y: 200 }\nforEach(obj, function(key, value) {\n  console.log(key, value)\n})\n```\n\n# DOM\n\n## 获取 DOM 节点\n\n```javascript\nvar div1 = document.getElementById('div1') //元素\nvar divList = document.getElementsByTagName('div') // 集合\n\nvar containerList = document.getElementByClassName('.container') // 集合\nvar pList = document.querySelectorAll('p') // 集合\n```\n\n## property\n\n```javascript\nvar obj = { x: 100, y: 200 }\nconsole.log(obj.x) // 100\n\nvar p = document.getElementsByTagName('p')[0]\nconsole.log(p.nodeName) // P\n```\n\n## Attribute\n\n```javascript\nvar pList = document.querySelectorAll('p')\nvar p = pList[0]\np.getAttribute('data-name')\np.setAttribute('data-name', 'imooc')\np.getAttribute('style')\np.setAttribute('style', 'font-size:30px')\n```\n\nproperty 只是一个 js 对象的属性的修改\n\nAttribute 是对 HTML 标签属性的修改\n\n## 新增节点\n\n```javascript\nvar div1 = document.getElementById('div1')\n// 添加新节点\nvar p1 = document.createElement('p')\np1.innerHTML = 'this is p1'\ndiv1.appendChild(p1) // 添加新创建的元素\n// 移动已有节点\nvar p2 = document.getElementById('p2')\ndiv1.appendChild(p2)\n```\n\n## 获取父元素和子元素\n\n```javascript\nvar div1 = document.getElementById('div1')\nvar parent = div1.parentElement\n\nvar child = div1.childNodes\n```\n\n## 删除节点\n\n```javascript\nvar div1 = document.getElementById('div1')\nvar child = div1.childNodes\ndiv1.removeChild(child[0])\n```\n\n# BOM\n\n## navigator & screen\n\n```javascript\n// navigator\nvar ua = navigator.userAgent\nvar isChrome = ua.indexOf('Chrome')\nconsole.log(isChrome)\n\n// screen\nconsole.log(screen.width)\nconsole.log(screen.height)\n```\n\n## location & history\n\n```javascript\n// location\nconsole.log(location.href)\nconsole.log(location.protocol) // 'http:' 'https:'\nconsole.log(location.host) //  域名\nconsole.log(location.pathname) // '/learn/199'\nconsole.log(location.search) // '?a=xxx'\nconsole.log(location.hash) // '#...'\n\n// history\nhistory.back()\nhistory.forward()\n```\n\n# 事件\n\n## 通用事件绑定\n\n```javascript\nvar btn = document.getElementById('btn1')\nbtn.addEventListener('click', function(event) {\n  console.log('clicked')\n})\n\nfunction bindEvent(elem, type, fn) {\n  elem.addEventListener(type, fn)\n}\nvar a = document.getElementById('link1')\nbindEvent(a, 'click', function(e) {\n  e.preventDefault() //阻止默认行为\n  alert('clicked')\n})\n```\n\n关于 IE 低版本的兼容性\n\nIE 低版本使用 attachEvent 绑定事件，和 W3C 标准不一样\n\nIE 低版本使用量已非常少，很多网站都早已不支持\n\n## 代理\n\n```html\n<div id=\"div1\">\n  <a href=\"#\">a1</a>\n  <a href=\"#\">a2</a>\n  <a href=\"#\">a3</a>\n  <!-- 会随时新增更多a标签 -->\n</div>\n\n<script>\n  var div1 = document.getElementById('div1')\n  div1.addEventListener('click', function(e) {\n    var target = e.target\n    if (target.nodeName === 'A') {\n      alert(target.innerHTML)\n    }\n  })\n</script>\n```\n\n## 完善通用绑定事件的函数\n\n```javascript\nfunction bindEvent(elem, type, selector, fn) {\n  if (fn == null) {\n    fn = selector\n    selector = null\n  }\n  elem.addEventListener(type, function(e) {\n    var target\n    // 代理\n    if (selector) {\n      target = e.target\n      if (target.matches(selector)) {\n        fn.call(target, e)\n      }\n    } else {\n      // 不是代理\n      fn(e)\n    }\n  })\n}\n\n// 使用代理\nvar div1 = document.getElementById('div1')\nbindEvent(div1, 'click', 'a', function(e) {\n  console.log(this.innerHTML)\n})\n\n// 不使用代理\nvar a = document.getElementById('a1')\nbindEvent(div1, 'click', function(e) {\n  console.log(a.innerHTML)\n})\n```\n\n# Ajax\n\n## XMLHttpRequest\n\n```javascript\nvar xhr = new XMLHttpRequest()\nXhr.open('GET', '/api', false) // false指异步\nXhr.onreadystatechange = function() {\n  // 这里的函数异步执行\n  if (xhr.readyState == 4) {\n    if (xhr.status == 200) {\n      console.log(xhr.responseText)\n    }\n  }\n}\nxhr.send(null)\n```\n\nIE 低版本使用 ActiveXObject\n\n## readyState\n\n0 - (未初始化) 还没用调用 send()方法\n\n1 - (载入) 已调用 send()方法，正在发送请求\n\n2 - (载入完成) send()方法执行完成，已经接收到全部响应内容\n\n3 - (交互) 正在解析响应内容\n\n4 - (完成) 响应内容解析完成，可以在客户端调用了\n\n## status\n\n2xx - 表示成功处理请求。 如 200\n\n3xx - 需要重定向，浏览器直接跳转\n\n4xx - 客户端请求错误，如 404\n\n5xx - 服务端错误\n\n# 跨域\n\n浏览器有同源策略，不允许 ajax 访问其他域接口\n\n跨域条件：协议、域名、端口，有一个不同就算跨域\n\n## 允许跨域的三个标签\n\nimg\n\nlink\n\nscript\n\n<img> 用于打点统计，统计网站可能是其他域\n\n<link><script> 可以使用CDN,CDN的也是其他域\n\n<script>可以用于JSONP\n\n\n\n## 跨域注意事项\n\n所有的跨域请求都必须经过信息提供方允许\n\n如果未经允许即可获取，那是浏览器同源策略出现漏洞\n\n\n\n## JSONP实现原理\n\n加载http://coding.m.imooc.com/classindex.html\n\n不一定服务器端存在一个classindex.html文件\n\n服务器跨域根据请求，动态生成一个文件，返回\n\n同理于 <script src=\"http://coding.m.imooc.com/api.js\">\n\n\n\n例如你的网站要跨域访问慕课网的一个接口\n\n慕课给你一个地址http://coding.m.imooc.com/api.js\n\n返回内容格式如 callback({x:100,y:200}) (可动态生成)\n\n```javascript\nwindow.callback = function(data) {\n    // 这是我们跨域得到的信息\n  \tconsole.log(data)\n}\n<script src=\"http://coding.m.imooc.com/api.js\"></script>\n<!-- 以上将返回 callback({x:100,y:200}) -->\n\n````\n\n\n\n# 存储\n\n描述一下cookie,sessionStorage和localStorage的区别\n\n## cookie\n\n本身用于客户端和服务器端通信\n\n但是它有本地存储的功能，于是就被“借用”\n\n使用document.cookie = … 获取和修改\n\n\n\n**cookie用于存储的缺点**\n\n存储量太小，只有4KB\n\n所有http请求都带有，会影响获取资源的效率\n\nAPI简单，需要封装才能用 document.cookie = ...\n\n\n\n## sessionStorage和localStorage的\n\nHTML5专门为存储而设计，最大容量5M\n\nAPI简答易用\n\nlocalStorage.setItem(key, value); localStorage.getItem(key)\n\n\n\n\n\n\n\n# 页面加载\n\n## 加载一个资源的过程\n\n浏览器根据DNS服务器得到域名的IP地址\n\n向这个IP的机器发送http(或https)请求\n\n服务器收到、处理并返回http(或https)请求\n\n浏览器得到返回内容\n\n## 浏览器渲染页面的过程\n\n根据HTML结果生成DOM Tree\n\n根据CSS生成CSSOM\n\n将DOM和CSSOM整合成RenderTree\n\n根据RenderTree开始渲染和展示\n\n遇到<script>时，会执行并阻塞渲染\n\n\n\n## window.onload 和 DOMContentLoaded\n\n```javascript\nwindow.addEventListener('load',function () {\n    // 页面的全部资源加载完才会执行，包括图片、视频等\n})\ndocument.addEventListener('DOMContentLoaded', function () {\n    // DOM渲染完即可执行，此时图片、视频还可能没有加载完\n})\n````\n\n# 性能优化\n\n**原则**\n\n多使用内存、缓存或者其他方法\n\n减少 CPU 计算、减少网络请求\n\n**从哪里入手**\n\n加载页面和静态资源\n\n页面渲染\n\n**加载资源优化**\n\n静态资源的压缩合并\n\n静态资源缓存\n\n使用 CDN 让资源加载更快\n\n使用 SSR 后端渲染，数据直接输出到 HTML 中\n\n**渲染优化**\n\nCSS 放前面、JS 放后面\n\n懒加载(图片懒加载、下拉加载更多)\n\n减少 DOM 查询，对 DOM 查询做缓存\n\n减少 DOM 操作，多个操作尽量合并在一起执行\n\n事件节流\n\n尽早执行操作（如 DOMContentLoaded）\n\n## 缓存 DOM 查询\n\n```javascript\n// 未缓存DOM查询\nvar i\nfor (i = 0; i < document.getElementByTagName('p').length; i++) {\n  // todo\n}\n\n// 缓存了DOM查询\nvar pList = document.getElementByTagName('p')\nvar i\nfor (i = 0; i < pList.length; i++) {\n  //todo\n}\n```\n\n## 合并 DOM 插入\n\n```javascript\nvar listNode = document.getElementById('list')\n\n// 要插入 10 个 li 标签\nvar frag = document.createDocumentFragment()\nvar x, li\nfor (x = 0; x < 10; x++) {\n  li = document.createElement('li')\n  li.innerHTML = 'List item' + x\n  frag.appendChild(li)\n}\nlistNode.appendChild(frag)\n```\n\n## 事件节流\n\n```javascript\nvar textarea = document.getElementById('text')\nvar timeoutId\ntextarea.addEventListener('keyup', function() {\n  if (timeoutId) {\n    clearTimeout(timeoutId)\n  }\n  timeoutId = setTimeout(function() {\n    // 触发 change 事件\n  }, 100)\n})\n```\n\n## 尽早操作\n\n```javascript\nwindow.addEventListener('load', function() {\n  // 页面的全部资源加载完才会执行，包括图片、视频等\n})\ndocument.addEventListener('DOMContentLoaded', function() {\n  // DOM渲染完即可执行，此时图片、视频还可能没有加载完\n})\n```\n\n# 安全性\n\nXSS 跨站请求攻击\n\nXSRF 跨站请求伪造\n","slug":"interview-js","published":1,"updated":"2019-05-22T08:45:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvz0jeh50002yrwm26qawge1","content":"<blockquote>\n<p>imooc 的 javascript 笔记</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"原型规则和示例\"><a href=\"#原型规则和示例\" class=\"headerlink\" title=\"原型规则和示例\"></a>原型规则和示例</h1><ul>\n<li>所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（除了“null”以外）</li>\n<li>所有的引用类型（数组、对象、函数），都有一个 <strong> proto </strong> (隐式原型)属性，属性值是一个普通的对象</li>\n<li>所有的函数，都有一个 prototype(显示原型)属性，属性值也是一个普通对象</li>\n<li>所有的引用类型（数组、对象、函数），<strong> proto </strong> (隐式原型)属性值指向它的构造函数的“prototype”(显示类型)属性值 <strong>obj. </strong> porto <strong> === Object.prototype</strong></li>\n<li>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的 <strong> proto </strong>(即它的构造函数的 prototype)中寻找</li>\n</ul>\n<h1 id=\"作用域和闭包\"><a href=\"#作用域和闭包\" class=\"headerlink\" title=\"作用域和闭包\"></a>作用域和闭包</h1><p>执行上下文</p>\n<p>this</p>\n<p>作用域</p>\n<p>作用域链</p>\n<p>闭包</p>\n<h2 id=\"执行上下文\"><a href=\"#执行上下文\" class=\"headerlink\" title=\"执行上下文\"></a>执行上下文</h2><p>范围：一段 &lt; script &gt; 或者一个函数</p>\n<p>全局：变量定义、函数声明</p>\n<p>函数：变量定义、函数声明、this、arguments</p>\n<p>Ps：函数声明 和 函数表达式 的区别</p>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p>this 要执行时才能确认值，定义时无法确认</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'A'</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.fn() <span class=\"comment\">// this === a</span></span><br><span class=\"line\">a.fn.call(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'B'</span> &#125;) <span class=\"comment\">// this === &#123;name: 'B'&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn1 = a.fn</span><br><span class=\"line\">fn1() <span class=\"comment\">// this === window</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>作为构造函数执行</li>\n<li>作为对象属性执行</li>\n<li>作为普通函数执行</li>\n<li>call apply bind</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> Foo(<span class=\"string\">'zhangsan'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'A'</span>,</span><br><span class=\"line\">  printName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.printName() <span class=\"comment\">// this === obj</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>) <span class=\"comment\">// this === window</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// call apply bind</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  alert(name)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn1.call(&#123; <span class=\"attr\">x</span>: <span class=\"number\">100</span> &#125;, <span class=\"string\">'zhangsan'</span>, <span class=\"number\">20</span>) <span class=\"comment\">// this === &#123;x:100&#125;</span></span><br><span class=\"line\">fn1.apply(&#123; <span class=\"attr\">x</span>: <span class=\"number\">100</span> &#125;, [<span class=\"string\">'zhangsan'</span>, <span class=\"number\">20</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  alert(name)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;.bind(&#123; <span class=\"attr\">y</span>: <span class=\"number\">200</span> &#125;)</span><br><span class=\"line\">fn2(<span class=\"string\">'zhangsan'</span>, <span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n<p>作用域</p>\n<ul>\n<li><p>没有块级作用域</p>\n</li>\n<li><p>只有函数和全局作用域</p>\n<p>​</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 无块级作用域</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'zhangsan'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数和全局作用域</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">200</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn'</span>, a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'global'</span>, a)</span><br><span class=\"line\">fn()</span><br></pre></td></tr></table></figure>\n<p>作用域链</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 当前作用域没有定义的变量，即“自由变量”</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">200</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">300</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// a是自由变量</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// b是自由变量</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(c)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  F2()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">F1()</span><br></pre></td></tr></table></figure>\n<h2 id=\"闭包的使用场景\"><a href=\"#闭包的使用场景\" class=\"headerlink\" title=\"闭包的使用场景\"></a>闭包的使用场景</h2><ul>\n<li>函数作为返回值</li>\n<li>函数作为参数传递</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个函数(函数作为返回值)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 自由变量，父级作用域寻找</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// f1 得到一个函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = F1()</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">200</span></span><br><span class=\"line\">f1()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1.函数作为返回值 ↑</span></span><br><span class=\"line\"><span class=\"comment\">// 2.函数作为参数来传递 ↓</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = F1()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F2</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">200</span></span><br><span class=\"line\">  fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">F2(f1)</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建-10-个标签，点击的时候弹出对应的序号\"><a href=\"#创建-10-个标签，点击的时候弹出对应的序号\" class=\"headerlink\" title=\"创建 10 个标签，点击的时候弹出对应的序号\"></a>创建 10 个<a>标签，点击的时候弹出对应的序号</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  ;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">    a.innerHTML = i + <span class=\"string\">'&lt;br&gt;'</span></span><br><span class=\"line\">    a.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      e.preventDefault()</span><br><span class=\"line\">      alert(i)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(a)</span><br><span class=\"line\">  &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"闭包的应用\"><a href=\"#闭包的应用\" class=\"headerlink\" title=\"闭包的应用\"></a>闭包的应用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 闭包实际开发中主要用于封装变量，收敛权限</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFirstLoad</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _list = []</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_list.indexOf(id) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      _list.push(id)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用  判断是否第一次</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstLoad = isFirstLoad()</span><br><span class=\"line\">firstLoad(<span class=\"number\">10</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">firstLoad(<span class=\"number\">10</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">firstLoad(<span class=\"number\">20</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"异步和单线程\"><a href=\"#异步和单线程\" class=\"headerlink\" title=\"异步和单线程\"></a>异步和单线程</h1><h2 id=\"同步和异步的区别是什么\"><a href=\"#同步和异步的区别是什么\" class=\"headerlink\" title=\"同步和异步的区别是什么\"></a>同步和异步的区别是什么</h2><p>同步会阻塞代码执行，而异步不会</p>\n<p>alert 是同步，setTimeout 是异步</p>\n<h2 id=\"前端使用异步的场景有哪些\"><a href=\"#前端使用异步的场景有哪些\" class=\"headerlink\" title=\"前端使用异步的场景有哪些\"></a>前端使用异步的场景有哪些</h2><p>定时任务：setTimeout、setInterval</p>\n<p>网络请求：ajax 请求，动态<img>加载</p>\n<p>事件绑定</p>\n<h1 id=\"日期\"><a href=\"#日期\" class=\"headerlink\" title=\"日期\"></a>日期</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Date</span>.now() <span class=\"comment\">// 获取当前时间毫秒数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dt = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">dt.getTime() <span class=\"comment\">// 获取毫秒数</span></span><br><span class=\"line\">dt.getFullYear() <span class=\"comment\">// 年</span></span><br><span class=\"line\">dt.getMonth() <span class=\"comment\">// 月(0-11)</span></span><br><span class=\"line\">dt.getDate() <span class=\"comment\">// 日(1-31)</span></span><br><span class=\"line\">dt.getHours() <span class=\"comment\">// 小时(0-23)</span></span><br><span class=\"line\">dt.getMinutes() <span class=\"comment\">// 分钟(0-59)</span></span><br><span class=\"line\">dt.getSeconds() <span class=\"comment\">// 秒(0-59)</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"数组-API\"><a href=\"#数组-API\" class=\"headerlink\" title=\"数组 API\"></a>数组 API</h1><h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//  遍历数组的所有元素</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index, item)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every\"></a>every</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 用来判断所有的数组元素，都满足一个条件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item &lt; <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br></pre></td></tr></table></figure>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some\"></a>some</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 用来判断只要有一个数组元素满足条件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br></pre></td></tr></table></figure>\n<h2 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 从小到大排序</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a - b</span><br><span class=\"line\">  <span class=\"comment\">// 从大到小排序</span></span><br><span class=\"line\">  <span class=\"comment\">// return b - a</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将元素重新组装，并返回</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'&lt;b&gt;'</span> + item + <span class=\"string\">'&lt;/b&gt;'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过某一个条件过滤数组</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br></pre></td></tr></table></figure>\n<h1 id=\"对象-API\"><a href=\"#对象-API\" class=\"headerlink\" title=\"对象 API\"></a>对象 API</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">100</span>,</span><br><span class=\"line\">  y: <span class=\"number\">200</span>,</span><br><span class=\"line\">  z: <span class=\"number\">300</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> key</span><br><span class=\"line\"><span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key, obj[key])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>获取随机数，要求是长度一致的字符串格式</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> random = <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\"><span class=\"keyword\">var</span> random = random + <span class=\"string\">'0000000000'</span> <span class=\"comment\">// 后面加上10个零</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> random = random.slice(<span class=\"number\">0</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(random)</span><br></pre></td></tr></table></figure>\n<p><strong>一个能遍历对象和数组的 forEach 函数</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义forEach</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forEach</span>(<span class=\"params\">obj, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> key</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">    obj.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>) </span>&#123;</span><br><span class=\"line\">      fn(index, item)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">        fn(key, obj[key])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用forEach</span></span><br><span class=\"line\"><span class=\"comment\">// 遍历数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"comment\">// 注意,这里参数的位置顺序换了，为了和对象遍历格式一致</span></span><br><span class=\"line\">forEach(arr, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index, item)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 遍历对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">x</span>: <span class=\"number\">100</span>, <span class=\"attr\">y</span>: <span class=\"number\">200</span> &#125;</span><br><span class=\"line\">forEach(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key, value)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h1><h2 id=\"获取-DOM-节点\"><a href=\"#获取-DOM-节点\" class=\"headerlink\" title=\"获取 DOM 节点\"></a>获取 DOM 节点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>) <span class=\"comment\">//元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> divList = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>) <span class=\"comment\">// 集合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> containerList = <span class=\"built_in\">document</span>.getElementByClassName(<span class=\"string\">'.container'</span>) <span class=\"comment\">// 集合</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'p'</span>) <span class=\"comment\">// 集合</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"property\"></a>property</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">x</span>: <span class=\"number\">100</span>, <span class=\"attr\">y</span>: <span class=\"number\">200</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.x) <span class=\"comment\">// 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'p'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.nodeName) <span class=\"comment\">// P</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Attribute\"><a href=\"#Attribute\" class=\"headerlink\" title=\"Attribute\"></a>Attribute</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'p'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = pList[<span class=\"number\">0</span>]</span><br><span class=\"line\">p.getAttribute(<span class=\"string\">'data-name'</span>)</span><br><span class=\"line\">p.setAttribute(<span class=\"string\">'data-name'</span>, <span class=\"string\">'imooc'</span>)</span><br><span class=\"line\">p.getAttribute(<span class=\"string\">'style'</span>)</span><br><span class=\"line\">p.setAttribute(<span class=\"string\">'style'</span>, <span class=\"string\">'font-size:30px'</span>)</span><br></pre></td></tr></table></figure>\n<p>property 只是一个 js 对象的属性的修改</p>\n<p>Attribute 是对 HTML 标签属性的修改</p>\n<h2 id=\"新增节点\"><a href=\"#新增节点\" class=\"headerlink\" title=\"新增节点\"></a>新增节点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 添加新节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>)</span><br><span class=\"line\">p1.innerHTML = <span class=\"string\">'this is p1'</span></span><br><span class=\"line\">div1.appendChild(p1) <span class=\"comment\">// 添加新创建的元素</span></span><br><span class=\"line\"><span class=\"comment\">// 移动已有节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'p2'</span>)</span><br><span class=\"line\">div1.appendChild(p2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取父元素和子元素\"><a href=\"#获取父元素和子元素\" class=\"headerlink\" title=\"获取父元素和子元素\"></a>获取父元素和子元素</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> parent = div1.parentElement</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = div1.childNodes</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> child = div1.childNodes</span><br><span class=\"line\">div1.removeChild(child[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n<h1 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h1><h2 id=\"navigator-amp-screen\"><a href=\"#navigator-amp-screen\" class=\"headerlink\" title=\"navigator &amp; screen\"></a>navigator &amp; screen</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// navigator</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ua = navigator.userAgent</span><br><span class=\"line\"><span class=\"keyword\">var</span> isChrome = ua.indexOf(<span class=\"string\">'Chrome'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isChrome)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// screen</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(screen.width)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(screen.height)</span><br></pre></td></tr></table></figure>\n<h2 id=\"location-amp-history\"><a href=\"#location-amp-history\" class=\"headerlink\" title=\"location &amp; history\"></a>location &amp; history</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// location</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(location.href)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(location.protocol) <span class=\"comment\">// 'http:' 'https:'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(location.host) <span class=\"comment\">//  域名</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(location.pathname) <span class=\"comment\">// '/learn/199'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(location.search) <span class=\"comment\">// '?a=xxx'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(location.hash) <span class=\"comment\">// '#...'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// history</span></span><br><span class=\"line\">history.back()</span><br><span class=\"line\">history.forward()</span><br></pre></td></tr></table></figure>\n<h1 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h1><h2 id=\"通用事件绑定\"><a href=\"#通用事件绑定\" class=\"headerlink\" title=\"通用事件绑定\"></a>通用事件绑定</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn1'</span>)</span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'clicked'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindEvent</span>(<span class=\"params\">elem, type, fn</span>) </span>&#123;</span><br><span class=\"line\">  elem.addEventListener(type, fn)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'link1'</span>)</span><br><span class=\"line\">bindEvent(a, <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.preventDefault() <span class=\"comment\">//阻止默认行为</span></span><br><span class=\"line\">  alert(<span class=\"string\">'clicked'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>关于 IE 低版本的兼容性</p>\n<p>IE 低版本使用 attachEvent 绑定事件，和 W3C 标准不一样</p>\n<p>IE 低版本使用量已非常少，很多网站都早已不支持</p>\n<h2 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"div1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>a1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>a2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>a3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 会随时新增更多a标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  div1.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> target = e.target</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> (target.nodeName === <span class=\"string\">'A'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      alert(target.innerHTML)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"完善通用绑定事件的函数\"><a href=\"#完善通用绑定事件的函数\" class=\"headerlink\" title=\"完善通用绑定事件的函数\"></a>完善通用绑定事件的函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindEvent</span>(<span class=\"params\">elem, type, selector, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fn == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    fn = selector</span><br><span class=\"line\">    selector = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  elem.addEventListener(type, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> target</span><br><span class=\"line\">    <span class=\"comment\">// 代理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (selector) &#123;</span><br><span class=\"line\">      target = e.target</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (target.matches(selector)) &#123;</span><br><span class=\"line\">        fn.call(target, e)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不是代理</span></span><br><span class=\"line\">      fn(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用代理</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>)</span><br><span class=\"line\">bindEvent(div1, <span class=\"string\">'click'</span>, <span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.innerHTML)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不使用代理</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'a1'</span>)</span><br><span class=\"line\">bindEvent(div1, <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a.innerHTML)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"Ajax\"><a href=\"#Ajax\" class=\"headerlink\" title=\"Ajax\"></a>Ajax</h1><h2 id=\"XMLHttpRequest\"><a href=\"#XMLHttpRequest\" class=\"headerlink\" title=\"XMLHttpRequest\"></a>XMLHttpRequest</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">Xhr.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'/api'</span>, <span class=\"literal\">false</span>) <span class=\"comment\">// false指异步</span></span><br><span class=\"line\">Xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里的函数异步执行</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(xhr.responseText)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xhr.send(<span class=\"literal\">null</span>)</span><br></pre></td></tr></table></figure>\n<p>IE 低版本使用 ActiveXObject</p>\n<h2 id=\"readyState\"><a href=\"#readyState\" class=\"headerlink\" title=\"readyState\"></a>readyState</h2><p>0 - (未初始化) 还没用调用 send()方法</p>\n<p>1 - (载入) 已调用 send()方法，正在发送请求</p>\n<p>2 - (载入完成) send()方法执行完成，已经接收到全部响应内容</p>\n<p>3 - (交互) 正在解析响应内容</p>\n<p>4 - (完成) 响应内容解析完成，可以在客户端调用了</p>\n<h2 id=\"status\"><a href=\"#status\" class=\"headerlink\" title=\"status\"></a>status</h2><p>2xx - 表示成功处理请求。 如 200</p>\n<p>3xx - 需要重定向，浏览器直接跳转</p>\n<p>4xx - 客户端请求错误，如 404</p>\n<p>5xx - 服务端错误</p>\n<h1 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h1><p>浏览器有同源策略，不允许 ajax 访问其他域接口</p>\n<p>跨域条件：协议、域名、端口，有一个不同就算跨域</p>\n<h2 id=\"允许跨域的三个标签\"><a href=\"#允许跨域的三个标签\" class=\"headerlink\" title=\"允许跨域的三个标签\"></a>允许跨域的三个标签</h2><p>img</p>\n<p>link</p>\n<p>script</p>\n<p><img> 用于打点统计，统计网站可能是其他域</p>\n<p><link><script> 可以使用CDN,CDN的也是其他域</p>\n<p><script>可以用于JSONP</p>\n<h2 id=\"跨域注意事项\"><a href=\"#跨域注意事项\" class=\"headerlink\" title=\"跨域注意事项\"></a>跨域注意事项</h2><p>所有的跨域请求都必须经过信息提供方允许</p>\n<p>如果未经允许即可获取，那是浏览器同源策略出现漏洞</p>\n<h2 id=\"JSONP实现原理\"><a href=\"#JSONP实现原理\" class=\"headerlink\" title=\"JSONP实现原理\"></a>JSONP实现原理</h2><p>加载<a href=\"http://coding.m.imooc.com/classindex.html\">http://coding.m.imooc.com/classindex.html</a></p>\n<p>不一定服务器端存在一个classindex.html文件</p>\n<p>服务器跨域根据请求，动态生成一个文件，返回</p>\n<p>同理于 <script src=\"http://coding.m.imooc.com/api.js\"></p>\n<p>例如你的网站要跨域访问慕课网的一个接口</p>\n<p>慕课给你一个地址<a href=\"http://coding.m.imooc.com/api.js\">http://coding.m.imooc.com/api.js</a></p>\n<p>返回内容格式如 callback({x:100,y:200}) (可动态生成)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.callback = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这是我们跨域得到的信息</span></span><br><span class=\"line\">  \t<span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"http://coding.m.imooc.com/api.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;!-- 以上将返回 callback(&#123;<span class=\"attr\">x</span>:<span class=\"number\">100</span>,<span class=\"attr\">y</span>:<span class=\"number\">200</span>&#125;) --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h1><p>描述一下cookie,sessionStorage和localStorage的区别</p>\n<h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><p>本身用于客户端和服务器端通信</p>\n<p>但是它有本地存储的功能，于是就被“借用”</p>\n<p>使用document.cookie = … 获取和修改</p>\n<p><strong>cookie用于存储的缺点</strong></p>\n<p>存储量太小，只有4KB</p>\n<p>所有http请求都带有，会影响获取资源的效率</p>\n<p>API简单，需要封装才能用 document.cookie = …</p>\n<h2 id=\"sessionStorage和localStorage的\"><a href=\"#sessionStorage和localStorage的\" class=\"headerlink\" title=\"sessionStorage和localStorage的\"></a>sessionStorage和localStorage的</h2><p>HTML5专门为存储而设计，最大容量5M</p>\n<p>API简答易用</p>\n<p>localStorage.setItem(key, value); localStorage.getItem(key)</p>\n<h1 id=\"页面加载\"><a href=\"#页面加载\" class=\"headerlink\" title=\"页面加载\"></a>页面加载</h1><h2 id=\"加载一个资源的过程\"><a href=\"#加载一个资源的过程\" class=\"headerlink\" title=\"加载一个资源的过程\"></a>加载一个资源的过程</h2><p>浏览器根据DNS服务器得到域名的IP地址</p>\n<p>向这个IP的机器发送http(或https)请求</p>\n<p>服务器收到、处理并返回http(或https)请求</p>\n<p>浏览器得到返回内容</p>\n<h2 id=\"浏览器渲染页面的过程\"><a href=\"#浏览器渲染页面的过程\" class=\"headerlink\" title=\"浏览器渲染页面的过程\"></a>浏览器渲染页面的过程</h2><p>根据HTML结果生成DOM Tree</p>\n<p>根据CSS生成CSSOM</p>\n<p>将DOM和CSSOM整合成RenderTree</p>\n<p>根据RenderTree开始渲染和展示</p>\n<p>遇到<script>时，会执行并阻塞渲染</p>\n<h2 id=\"window-onload-和-DOMContentLoaded\"><a href=\"#window-onload-和-DOMContentLoaded\" class=\"headerlink\" title=\"window.onload 和 DOMContentLoaded\"></a>window.onload 和 DOMContentLoaded</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 页面的全部资源加载完才会执行，包括图片、视频等</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// DOM渲染完即可执行，此时图片、视频还可能没有加载完</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h1><p><strong>原则</strong></p>\n<p>多使用内存、缓存或者其他方法</p>\n<p>减少 CPU 计算、减少网络请求</p>\n<p><strong>从哪里入手</strong></p>\n<p>加载页面和静态资源</p>\n<p>页面渲染</p>\n<p><strong>加载资源优化</strong></p>\n<p>静态资源的压缩合并</p>\n<p>静态资源缓存</p>\n<p>使用 CDN 让资源加载更快</p>\n<p>使用 SSR 后端渲染，数据直接输出到 HTML 中</p>\n<p><strong>渲染优化</strong></p>\n<p>CSS 放前面、JS 放后面</p>\n<p>懒加载(图片懒加载、下拉加载更多)</p>\n<p>减少 DOM 查询，对 DOM 查询做缓存</p>\n<p>减少 DOM 操作，多个操作尽量合并在一起执行</p>\n<p>事件节流</p>\n<p>尽早执行操作（如 DOMContentLoaded）</p>\n<h2 id=\"缓存-DOM-查询\"><a href=\"#缓存-DOM-查询\" class=\"headerlink\" title=\"缓存 DOM 查询\"></a>缓存 DOM 查询</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 未缓存DOM查询</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">document</span>.getElementByTagName(<span class=\"string\">'p'</span>).length; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// todo</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 缓存了DOM查询</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pList = <span class=\"built_in\">document</span>.getElementByTagName(<span class=\"string\">'p'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> i</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; pList.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//todo</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"合并-DOM-插入\"><a href=\"#合并-DOM-插入\" class=\"headerlink\" title=\"合并 DOM 插入\"></a>合并 DOM 插入</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> listNode = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'list'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 要插入 10 个 li 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> frag = <span class=\"built_in\">document</span>.createDocumentFragment()</span><br><span class=\"line\"><span class=\"keyword\">var</span> x, li</span><br><span class=\"line\"><span class=\"keyword\">for</span> (x = <span class=\"number\">0</span>; x &lt; <span class=\"number\">10</span>; x++) &#123;</span><br><span class=\"line\">  li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'li'</span>)</span><br><span class=\"line\">  li.innerHTML = <span class=\"string\">'List item'</span> + x</span><br><span class=\"line\">  frag.appendChild(li)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">listNode.appendChild(frag)</span><br></pre></td></tr></table></figure>\n<h2 id=\"事件节流\"><a href=\"#事件节流\" class=\"headerlink\" title=\"事件节流\"></a>事件节流</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> textarea = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'text'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> timeoutId</span><br><span class=\"line\">textarea.addEventListener(<span class=\"string\">'keyup'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (timeoutId) &#123;</span><br><span class=\"line\">    clearTimeout(timeoutId)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  timeoutId = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 触发 change 事件</span></span><br><span class=\"line\">  &#125;, <span class=\"number\">100</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"尽早操作\"><a href=\"#尽早操作\" class=\"headerlink\" title=\"尽早操作\"></a>尽早操作</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 页面的全部资源加载完才会执行，包括图片、视频等</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// DOM渲染完即可执行，此时图片、视频还可能没有加载完</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h1><p>XSS 跨站请求攻击</p>\n<p>XSRF 跨站请求伪造</p>\n</script></p>","site":{"data":{}},"excerpt":"<blockquote>\n<p>imooc 的 javascript 笔记</p>\n</blockquote>","more":"<h1 id=\"原型规则和示例\"><a href=\"#原型规则和示例\" class=\"headerlink\" title=\"原型规则和示例\"></a>原型规则和示例</h1><ul>\n<li>所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（除了“null”以外）</li>\n<li>所有的引用类型（数组、对象、函数），都有一个 <strong> proto </strong> (隐式原型)属性，属性值是一个普通的对象</li>\n<li>所有的函数，都有一个 prototype(显示原型)属性，属性值也是一个普通对象</li>\n<li>所有的引用类型（数组、对象、函数），<strong> proto </strong> (隐式原型)属性值指向它的构造函数的“prototype”(显示类型)属性值 <strong>obj. </strong> porto <strong> === Object.prototype</strong></li>\n<li>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的 <strong> proto </strong>(即它的构造函数的 prototype)中寻找</li>\n</ul>\n<h1 id=\"作用域和闭包\"><a href=\"#作用域和闭包\" class=\"headerlink\" title=\"作用域和闭包\"></a>作用域和闭包</h1><p>执行上下文</p>\n<p>this</p>\n<p>作用域</p>\n<p>作用域链</p>\n<p>闭包</p>\n<h2 id=\"执行上下文\"><a href=\"#执行上下文\" class=\"headerlink\" title=\"执行上下文\"></a>执行上下文</h2><p>范围：一段 &lt; script &gt; 或者一个函数</p>\n<p>全局：变量定义、函数声明</p>\n<p>函数：变量定义、函数声明、this、arguments</p>\n<p>Ps：函数声明 和 函数表达式 的区别</p>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p>this 要执行时才能确认值，定义时无法确认</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'A'</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.fn() <span class=\"comment\">// this === a</span></span><br><span class=\"line\">a.fn.call(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'B'</span> &#125;) <span class=\"comment\">// this === &#123;name: 'B'&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn1 = a.fn</span><br><span class=\"line\">fn1() <span class=\"comment\">// this === window</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>作为构造函数执行</li>\n<li>作为对象属性执行</li>\n<li>作为普通函数执行</li>\n<li>call apply bind</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> Foo(<span class=\"string\">'zhangsan'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'A'</span>,</span><br><span class=\"line\">  printName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.printName() <span class=\"comment\">// this === obj</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>) <span class=\"comment\">// this === window</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// call apply bind</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  alert(name)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn1.call(&#123; <span class=\"attr\">x</span>: <span class=\"number\">100</span> &#125;, <span class=\"string\">'zhangsan'</span>, <span class=\"number\">20</span>) <span class=\"comment\">// this === &#123;x:100&#125;</span></span><br><span class=\"line\">fn1.apply(&#123; <span class=\"attr\">x</span>: <span class=\"number\">100</span> &#125;, [<span class=\"string\">'zhangsan'</span>, <span class=\"number\">20</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  alert(name)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;.bind(&#123; <span class=\"attr\">y</span>: <span class=\"number\">200</span> &#125;)</span><br><span class=\"line\">fn2(<span class=\"string\">'zhangsan'</span>, <span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n<p>作用域</p>\n<ul>\n<li><p>没有块级作用域</p>\n</li>\n<li><p>只有函数和全局作用域</p>\n<p>​</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 无块级作用域</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'zhangsan'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数和全局作用域</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">200</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'fn'</span>, a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'global'</span>, a)</span><br><span class=\"line\">fn()</span><br></pre></td></tr></table></figure>\n<p>作用域链</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 当前作用域没有定义的变量，即“自由变量”</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">200</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">300</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// a是自由变量</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// b是自由变量</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(c)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  F2()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">F1()</span><br></pre></td></tr></table></figure>\n<h2 id=\"闭包的使用场景\"><a href=\"#闭包的使用场景\" class=\"headerlink\" title=\"闭包的使用场景\"></a>闭包的使用场景</h2><ul>\n<li>函数作为返回值</li>\n<li>函数作为参数传递</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个函数(函数作为返回值)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 自由变量，父级作用域寻找</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// f1 得到一个函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = F1()</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">200</span></span><br><span class=\"line\">f1()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1.函数作为返回值 ↑</span></span><br><span class=\"line\"><span class=\"comment\">// 2.函数作为参数来传递 ↓</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = F1()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F2</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">200</span></span><br><span class=\"line\">  fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">F2(f1)</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建-10-个标签，点击的时候弹出对应的序号\"><a href=\"#创建-10-个标签，点击的时候弹出对应的序号\" class=\"headerlink\" title=\"创建 10 个标签，点击的时候弹出对应的序号\"></a>创建 10 个<a>标签，点击的时候弹出对应的序号</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  ;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">    a.innerHTML = i + <span class=\"string\">'&lt;br&gt;'</span></span><br><span class=\"line\">    a.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      e.preventDefault()</span><br><span class=\"line\">      alert(i)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(a)</span><br><span class=\"line\">  &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"闭包的应用\"><a href=\"#闭包的应用\" class=\"headerlink\" title=\"闭包的应用\"></a>闭包的应用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 闭包实际开发中主要用于封装变量，收敛权限</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFirstLoad</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _list = []</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_list.indexOf(id) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      _list.push(id)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用  判断是否第一次</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstLoad = isFirstLoad()</span><br><span class=\"line\">firstLoad(<span class=\"number\">10</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">firstLoad(<span class=\"number\">10</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">firstLoad(<span class=\"number\">20</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"异步和单线程\"><a href=\"#异步和单线程\" class=\"headerlink\" title=\"异步和单线程\"></a>异步和单线程</h1><h2 id=\"同步和异步的区别是什么\"><a href=\"#同步和异步的区别是什么\" class=\"headerlink\" title=\"同步和异步的区别是什么\"></a>同步和异步的区别是什么</h2><p>同步会阻塞代码执行，而异步不会</p>\n<p>alert 是同步，setTimeout 是异步</p>\n<h2 id=\"前端使用异步的场景有哪些\"><a href=\"#前端使用异步的场景有哪些\" class=\"headerlink\" title=\"前端使用异步的场景有哪些\"></a>前端使用异步的场景有哪些</h2><p>定时任务：setTimeout、setInterval</p>\n<p>网络请求：ajax 请求，动态<img>加载</p>\n<p>事件绑定</p>\n<h1 id=\"日期\"><a href=\"#日期\" class=\"headerlink\" title=\"日期\"></a>日期</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Date</span>.now() <span class=\"comment\">// 获取当前时间毫秒数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dt = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">dt.getTime() <span class=\"comment\">// 获取毫秒数</span></span><br><span class=\"line\">dt.getFullYear() <span class=\"comment\">// 年</span></span><br><span class=\"line\">dt.getMonth() <span class=\"comment\">// 月(0-11)</span></span><br><span class=\"line\">dt.getDate() <span class=\"comment\">// 日(1-31)</span></span><br><span class=\"line\">dt.getHours() <span class=\"comment\">// 小时(0-23)</span></span><br><span class=\"line\">dt.getMinutes() <span class=\"comment\">// 分钟(0-59)</span></span><br><span class=\"line\">dt.getSeconds() <span class=\"comment\">// 秒(0-59)</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"数组-API\"><a href=\"#数组-API\" class=\"headerlink\" title=\"数组 API\"></a>数组 API</h1><h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//  遍历数组的所有元素</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index, item)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every\"></a>every</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 用来判断所有的数组元素，都满足一个条件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item &lt; <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br></pre></td></tr></table></figure>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some\"></a>some</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 用来判断只要有一个数组元素满足条件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result)</span><br></pre></td></tr></table></figure>\n<h2 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 从小到大排序</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a - b</span><br><span class=\"line\">  <span class=\"comment\">// 从大到小排序</span></span><br><span class=\"line\">  <span class=\"comment\">// return b - a</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将元素重新组装，并返回</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'&lt;b&gt;'</span> + item + <span class=\"string\">'&lt;/b&gt;'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过某一个条件过滤数组</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br></pre></td></tr></table></figure>\n<h1 id=\"对象-API\"><a href=\"#对象-API\" class=\"headerlink\" title=\"对象 API\"></a>对象 API</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">100</span>,</span><br><span class=\"line\">  y: <span class=\"number\">200</span>,</span><br><span class=\"line\">  z: <span class=\"number\">300</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> key</span><br><span class=\"line\"><span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key, obj[key])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>获取随机数，要求是长度一致的字符串格式</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> random = <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\"><span class=\"keyword\">var</span> random = random + <span class=\"string\">'0000000000'</span> <span class=\"comment\">// 后面加上10个零</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> random = random.slice(<span class=\"number\">0</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(random)</span><br></pre></td></tr></table></figure>\n<p><strong>一个能遍历对象和数组的 forEach 函数</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义forEach</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forEach</span>(<span class=\"params\">obj, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> key</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">    obj.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index</span>) </span>&#123;</span><br><span class=\"line\">      fn(index, item)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">        fn(key, obj[key])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用forEach</span></span><br><span class=\"line\"><span class=\"comment\">// 遍历数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"comment\">// 注意,这里参数的位置顺序换了，为了和对象遍历格式一致</span></span><br><span class=\"line\">forEach(arr, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index, item)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 遍历对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">x</span>: <span class=\"number\">100</span>, <span class=\"attr\">y</span>: <span class=\"number\">200</span> &#125;</span><br><span class=\"line\">forEach(obj, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key, value)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h1><h2 id=\"获取-DOM-节点\"><a href=\"#获取-DOM-节点\" class=\"headerlink\" title=\"获取 DOM 节点\"></a>获取 DOM 节点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>) <span class=\"comment\">//元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> divList = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>) <span class=\"comment\">// 集合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> containerList = <span class=\"built_in\">document</span>.getElementByClassName(<span class=\"string\">'.container'</span>) <span class=\"comment\">// 集合</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'p'</span>) <span class=\"comment\">// 集合</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"property\"></a>property</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">x</span>: <span class=\"number\">100</span>, <span class=\"attr\">y</span>: <span class=\"number\">200</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.x) <span class=\"comment\">// 100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'p'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p.nodeName) <span class=\"comment\">// P</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Attribute\"><a href=\"#Attribute\" class=\"headerlink\" title=\"Attribute\"></a>Attribute</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'p'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = pList[<span class=\"number\">0</span>]</span><br><span class=\"line\">p.getAttribute(<span class=\"string\">'data-name'</span>)</span><br><span class=\"line\">p.setAttribute(<span class=\"string\">'data-name'</span>, <span class=\"string\">'imooc'</span>)</span><br><span class=\"line\">p.getAttribute(<span class=\"string\">'style'</span>)</span><br><span class=\"line\">p.setAttribute(<span class=\"string\">'style'</span>, <span class=\"string\">'font-size:30px'</span>)</span><br></pre></td></tr></table></figure>\n<p>property 只是一个 js 对象的属性的修改</p>\n<p>Attribute 是对 HTML 标签属性的修改</p>\n<h2 id=\"新增节点\"><a href=\"#新增节点\" class=\"headerlink\" title=\"新增节点\"></a>新增节点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 添加新节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>)</span><br><span class=\"line\">p1.innerHTML = <span class=\"string\">'this is p1'</span></span><br><span class=\"line\">div1.appendChild(p1) <span class=\"comment\">// 添加新创建的元素</span></span><br><span class=\"line\"><span class=\"comment\">// 移动已有节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'p2'</span>)</span><br><span class=\"line\">div1.appendChild(p2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取父元素和子元素\"><a href=\"#获取父元素和子元素\" class=\"headerlink\" title=\"获取父元素和子元素\"></a>获取父元素和子元素</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> parent = div1.parentElement</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = div1.childNodes</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> child = div1.childNodes</span><br><span class=\"line\">div1.removeChild(child[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n<h1 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h1><h2 id=\"navigator-amp-screen\"><a href=\"#navigator-amp-screen\" class=\"headerlink\" title=\"navigator &amp; screen\"></a>navigator &amp; screen</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// navigator</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ua = navigator.userAgent</span><br><span class=\"line\"><span class=\"keyword\">var</span> isChrome = ua.indexOf(<span class=\"string\">'Chrome'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isChrome)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// screen</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(screen.width)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(screen.height)</span><br></pre></td></tr></table></figure>\n<h2 id=\"location-amp-history\"><a href=\"#location-amp-history\" class=\"headerlink\" title=\"location &amp; history\"></a>location &amp; history</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// location</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(location.href)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(location.protocol) <span class=\"comment\">// 'http:' 'https:'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(location.host) <span class=\"comment\">//  域名</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(location.pathname) <span class=\"comment\">// '/learn/199'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(location.search) <span class=\"comment\">// '?a=xxx'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(location.hash) <span class=\"comment\">// '#...'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// history</span></span><br><span class=\"line\">history.back()</span><br><span class=\"line\">history.forward()</span><br></pre></td></tr></table></figure>\n<h1 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h1><h2 id=\"通用事件绑定\"><a href=\"#通用事件绑定\" class=\"headerlink\" title=\"通用事件绑定\"></a>通用事件绑定</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn1'</span>)</span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'clicked'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindEvent</span>(<span class=\"params\">elem, type, fn</span>) </span>&#123;</span><br><span class=\"line\">  elem.addEventListener(type, fn)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'link1'</span>)</span><br><span class=\"line\">bindEvent(a, <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.preventDefault() <span class=\"comment\">//阻止默认行为</span></span><br><span class=\"line\">  alert(<span class=\"string\">'clicked'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>关于 IE 低版本的兼容性</p>\n<p>IE 低版本使用 attachEvent 绑定事件，和 W3C 标准不一样</p>\n<p>IE 低版本使用量已非常少，很多网站都早已不支持</p>\n<h2 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"div1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>a1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>a2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>a3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 会随时新增更多a标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  div1.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> target = e.target</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> (target.nodeName === <span class=\"string\">'A'</span>) &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      alert(target.innerHTML)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"完善通用绑定事件的函数\"><a href=\"#完善通用绑定事件的函数\" class=\"headerlink\" title=\"完善通用绑定事件的函数\"></a>完善通用绑定事件的函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindEvent</span>(<span class=\"params\">elem, type, selector, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fn == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    fn = selector</span><br><span class=\"line\">    selector = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  elem.addEventListener(type, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> target</span><br><span class=\"line\">    <span class=\"comment\">// 代理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (selector) &#123;</span><br><span class=\"line\">      target = e.target</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (target.matches(selector)) &#123;</span><br><span class=\"line\">        fn.call(target, e)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不是代理</span></span><br><span class=\"line\">      fn(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用代理</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>)</span><br><span class=\"line\">bindEvent(div1, <span class=\"string\">'click'</span>, <span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.innerHTML)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不使用代理</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'a1'</span>)</span><br><span class=\"line\">bindEvent(div1, <span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a.innerHTML)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"Ajax\"><a href=\"#Ajax\" class=\"headerlink\" title=\"Ajax\"></a>Ajax</h1><h2 id=\"XMLHttpRequest\"><a href=\"#XMLHttpRequest\" class=\"headerlink\" title=\"XMLHttpRequest\"></a>XMLHttpRequest</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">Xhr.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'/api'</span>, <span class=\"literal\">false</span>) <span class=\"comment\">// false指异步</span></span><br><span class=\"line\">Xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里的函数异步执行</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(xhr.responseText)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xhr.send(<span class=\"literal\">null</span>)</span><br></pre></td></tr></table></figure>\n<p>IE 低版本使用 ActiveXObject</p>\n<h2 id=\"readyState\"><a href=\"#readyState\" class=\"headerlink\" title=\"readyState\"></a>readyState</h2><p>0 - (未初始化) 还没用调用 send()方法</p>\n<p>1 - (载入) 已调用 send()方法，正在发送请求</p>\n<p>2 - (载入完成) send()方法执行完成，已经接收到全部响应内容</p>\n<p>3 - (交互) 正在解析响应内容</p>\n<p>4 - (完成) 响应内容解析完成，可以在客户端调用了</p>\n<h2 id=\"status\"><a href=\"#status\" class=\"headerlink\" title=\"status\"></a>status</h2><p>2xx - 表示成功处理请求。 如 200</p>\n<p>3xx - 需要重定向，浏览器直接跳转</p>\n<p>4xx - 客户端请求错误，如 404</p>\n<p>5xx - 服务端错误</p>\n<h1 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h1><p>浏览器有同源策略，不允许 ajax 访问其他域接口</p>\n<p>跨域条件：协议、域名、端口，有一个不同就算跨域</p>\n<h2 id=\"允许跨域的三个标签\"><a href=\"#允许跨域的三个标签\" class=\"headerlink\" title=\"允许跨域的三个标签\"></a>允许跨域的三个标签</h2><p>img</p>\n<p>link</p>\n<p>script</p>\n<p><img> 用于打点统计，统计网站可能是其他域</p>\n<p><link><script> 可以使用CDN,CDN的也是其他域</p>\n<p><script>可以用于JSONP</p>\n<h2 id=\"跨域注意事项\"><a href=\"#跨域注意事项\" class=\"headerlink\" title=\"跨域注意事项\"></a>跨域注意事项</h2><p>所有的跨域请求都必须经过信息提供方允许</p>\n<p>如果未经允许即可获取，那是浏览器同源策略出现漏洞</p>\n<h2 id=\"JSONP实现原理\"><a href=\"#JSONP实现原理\" class=\"headerlink\" title=\"JSONP实现原理\"></a>JSONP实现原理</h2><p>加载<a href=\"http://coding.m.imooc.com/classindex.html\">http://coding.m.imooc.com/classindex.html</a></p>\n<p>不一定服务器端存在一个classindex.html文件</p>\n<p>服务器跨域根据请求，动态生成一个文件，返回</p>\n<p>同理于 <script src=\"http://coding.m.imooc.com/api.js\"></p>\n<p>例如你的网站要跨域访问慕课网的一个接口</p>\n<p>慕课给你一个地址<a href=\"http://coding.m.imooc.com/api.js\">http://coding.m.imooc.com/api.js</a></p>\n<p>返回内容格式如 callback({x:100,y:200}) (可动态生成)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.callback = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这是我们跨域得到的信息</span></span><br><span class=\"line\">  \t<span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"http://coding.m.imooc.com/api.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;!-- 以上将返回 callback(&#123;<span class=\"attr\">x</span>:<span class=\"number\">100</span>,<span class=\"attr\">y</span>:<span class=\"number\">200</span>&#125;) --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h1><p>描述一下cookie,sessionStorage和localStorage的区别</p>\n<h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><p>本身用于客户端和服务器端通信</p>\n<p>但是它有本地存储的功能，于是就被“借用”</p>\n<p>使用document.cookie = … 获取和修改</p>\n<p><strong>cookie用于存储的缺点</strong></p>\n<p>存储量太小，只有4KB</p>\n<p>所有http请求都带有，会影响获取资源的效率</p>\n<p>API简单，需要封装才能用 document.cookie = …</p>\n<h2 id=\"sessionStorage和localStorage的\"><a href=\"#sessionStorage和localStorage的\" class=\"headerlink\" title=\"sessionStorage和localStorage的\"></a>sessionStorage和localStorage的</h2><p>HTML5专门为存储而设计，最大容量5M</p>\n<p>API简答易用</p>\n<p>localStorage.setItem(key, value); localStorage.getItem(key)</p>\n<h1 id=\"页面加载\"><a href=\"#页面加载\" class=\"headerlink\" title=\"页面加载\"></a>页面加载</h1><h2 id=\"加载一个资源的过程\"><a href=\"#加载一个资源的过程\" class=\"headerlink\" title=\"加载一个资源的过程\"></a>加载一个资源的过程</h2><p>浏览器根据DNS服务器得到域名的IP地址</p>\n<p>向这个IP的机器发送http(或https)请求</p>\n<p>服务器收到、处理并返回http(或https)请求</p>\n<p>浏览器得到返回内容</p>\n<h2 id=\"浏览器渲染页面的过程\"><a href=\"#浏览器渲染页面的过程\" class=\"headerlink\" title=\"浏览器渲染页面的过程\"></a>浏览器渲染页面的过程</h2><p>根据HTML结果生成DOM Tree</p>\n<p>根据CSS生成CSSOM</p>\n<p>将DOM和CSSOM整合成RenderTree</p>\n<p>根据RenderTree开始渲染和展示</p>\n<p>遇到<script>时，会执行并阻塞渲染</p>\n<h2 id=\"window-onload-和-DOMContentLoaded\"><a href=\"#window-onload-和-DOMContentLoaded\" class=\"headerlink\" title=\"window.onload 和 DOMContentLoaded\"></a>window.onload 和 DOMContentLoaded</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 页面的全部资源加载完才会执行，包括图片、视频等</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// DOM渲染完即可执行，此时图片、视频还可能没有加载完</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h1><p><strong>原则</strong></p>\n<p>多使用内存、缓存或者其他方法</p>\n<p>减少 CPU 计算、减少网络请求</p>\n<p><strong>从哪里入手</strong></p>\n<p>加载页面和静态资源</p>\n<p>页面渲染</p>\n<p><strong>加载资源优化</strong></p>\n<p>静态资源的压缩合并</p>\n<p>静态资源缓存</p>\n<p>使用 CDN 让资源加载更快</p>\n<p>使用 SSR 后端渲染，数据直接输出到 HTML 中</p>\n<p><strong>渲染优化</strong></p>\n<p>CSS 放前面、JS 放后面</p>\n<p>懒加载(图片懒加载、下拉加载更多)</p>\n<p>减少 DOM 查询，对 DOM 查询做缓存</p>\n<p>减少 DOM 操作，多个操作尽量合并在一起执行</p>\n<p>事件节流</p>\n<p>尽早执行操作（如 DOMContentLoaded）</p>\n<h2 id=\"缓存-DOM-查询\"><a href=\"#缓存-DOM-查询\" class=\"headerlink\" title=\"缓存 DOM 查询\"></a>缓存 DOM 查询</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 未缓存DOM查询</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">document</span>.getElementByTagName(<span class=\"string\">'p'</span>).length; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// todo</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 缓存了DOM查询</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pList = <span class=\"built_in\">document</span>.getElementByTagName(<span class=\"string\">'p'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> i</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; pList.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//todo</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"合并-DOM-插入\"><a href=\"#合并-DOM-插入\" class=\"headerlink\" title=\"合并 DOM 插入\"></a>合并 DOM 插入</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> listNode = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'list'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 要插入 10 个 li 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> frag = <span class=\"built_in\">document</span>.createDocumentFragment()</span><br><span class=\"line\"><span class=\"keyword\">var</span> x, li</span><br><span class=\"line\"><span class=\"keyword\">for</span> (x = <span class=\"number\">0</span>; x &lt; <span class=\"number\">10</span>; x++) &#123;</span><br><span class=\"line\">  li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'li'</span>)</span><br><span class=\"line\">  li.innerHTML = <span class=\"string\">'List item'</span> + x</span><br><span class=\"line\">  frag.appendChild(li)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">listNode.appendChild(frag)</span><br></pre></td></tr></table></figure>\n<h2 id=\"事件节流\"><a href=\"#事件节流\" class=\"headerlink\" title=\"事件节流\"></a>事件节流</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> textarea = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'text'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> timeoutId</span><br><span class=\"line\">textarea.addEventListener(<span class=\"string\">'keyup'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (timeoutId) &#123;</span><br><span class=\"line\">    clearTimeout(timeoutId)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  timeoutId = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 触发 change 事件</span></span><br><span class=\"line\">  &#125;, <span class=\"number\">100</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"尽早操作\"><a href=\"#尽早操作\" class=\"headerlink\" title=\"尽早操作\"></a>尽早操作</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 页面的全部资源加载完才会执行，包括图片、视频等</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// DOM渲染完即可执行，此时图片、视频还可能没有加载完</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h1><p>XSS 跨站请求攻击</p>\n<p>XSRF 跨站请求伪造</p>\n</script></p>"},{"title":"interview","date":"2019-05-22T08:29:49.000Z","type":"categories","_content":"\n> imooc 面试笔记\n\n<!--more-->\n\n# DOM 事件\n\n基本概念：DOM 事件级别\n\nDOM 事件级别\n\nDOM 事件流\n\n描述 DOM 事件捕获的具体流程\n\nEvent 对象的常用应用\n\n自定义事件\n\n## DOM 事件类 事件级别\n\nDOM0 element.onclick=function(){}\n\nDOM2 element.addEventListener('click',function(){},false)\n\nDOM3 element.addEventListener('keyup',function(){},false)\n\n## DOM 事件模型\n\n事件模型\n\n​ 捕获 ↓ 冒泡 ↑\n\n## DOM 事件流\n\n三阶段\n\n捕获->目标阶段->冒泡\n\n## 描述 DOM 事件捕获的具体流程\n\nwindow->\n\n​ document->\n\n​ html->\n\n​ body->\n\n​ ….\n\n​ 目标元素\n\n```javascript\nvar ev = document.getElementById('ev')\n\nwindow.addEventListener(\n  'click',\n  function(e) {\n    console.log('window captrue')\n  },\n  true\n)\n\ndocument.addEventListener(\n  'click',\n  function(e) {\n    console.log('document captrue')\n  },\n  true\n)\n\ndocument.documentElement.addEventListener(\n  'click',\n  function(e) {\n    console.log('html captrue')\n  },\n  true\n)\n\ndocument.body.addEventListener(\n  'click',\n  function(e) {\n    console.log('body captrue')\n  },\n  true\n)\n\nev.addEventListener(\n  'click',\n  function(e) {\n    console.log('ev captrue')\n  },\n  true\n)\n```\n\n## Event 对象的常用应用\n\nevent.preventDefault() //阻止默认行为\n\nEvent.stopPropagation() //阻止冒泡行为\n\nEvent.stopImmediatePropagation()\n\n​ //同一元素绑定两个点击事件 A 和 B 在事件 A 中使用该事件 Event.stopImmediatePropagation()可以阻止事件 B 的触发\n\nEvent.currentTarget //当前绑定的事件\n\nEvent.target //当前被点击的元素\n\n## 自定义事件\n\n```Javascript\nvar eve = new Event('custome');\nel.addEventListener('custome',function(){\n  console.log('custome');\n});\nel.dispatchEvent(eve)\n```\n\nCustomEvent 可以添加参数\n\n# HTTP 协议类\n\nHTTP 协议的主要特点\n\nHTTP 报文的组成部分\n\nHTTP 方法\n\nPOST 和 GET 的区别\n\nHTTP 状态码\n\n什么是持久链接\n\n什么是管线化\n\n## HTTP 协议的主要特点\n\n### 简单快速\n\n​ 每个资源(URI)都是固定的\n\n### 灵活\n\n​ 通过头部分，一个 HTTP 协议可以完成不同数据类型的传输\n\n### 无连接\n\n​ 连接一次，它就会断掉，不会保持连接\n\n### 无状态\n\n​ 单从 HTTP 协议上，是不能区分两次连接者的身份的\n\n## HTTP 报文的组成部分\n\n### 请求报文\n\n​ 请求行\n\n​ http 方法、页面地址、http 协议、版本\n\n​ 请求头\n\n​ 空行\n\n​ 请求体\n\n### 响应报文\n\n​ 状态行\n\n​ 响应头\n\n​ 空行\n\n​ 响应体\n\n## HTTP 协议类\n\n### HTTP 方法\n\n​ GET 获取资源\n\n​ POST 传输资源\n\n​ PUT 更新资源\n\n​ DELETE 删除资源\n\n​ HEAD 获得报文首部\n\n## POST 和 GET 的区别\n\n- GET 在浏览器回退时是无害的，而 POST 会再次提交请求\n\n- GET 产生的 URL 地址可以被收藏，而 POST 不可以\n\n- GET 请求会被浏览器主动缓存，而 POST 不会，除非手动设置\n\n- GET 请求只能进行 url 编码，而 POST 支持多种编码方式\n\n- GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留\n\n- GET 请求在 URL 中传送的参数是有长度限制的，而 POST 没有限制\n\n- 对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制\n\n- GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息\n\n- GET 参数通过 URL 传递，POST 放在 Request body 中\n\n## HTTP 状态码\n\n1xx: 指示信息-表示请求已接受，继续处理\n\n2xx: 成功-表示请求已被成功接受\n\n3xx: 重定向-要完成请求必须进行更进一步的操作\n\n4xx: 客户端错误-请求语法错误或请求无法实现\n\n5xx: 服务器错误-服务器未能实现合法的请求\n\n200 OK : 客户端请求成功\n\n206 Partial Content: 客户发送了一个带有 Range 头的 GET 请求，服务器完成了它\n\n301 Moved Permanently: 所请求的页面已经转移至新的 url\n\n302 Found: 所请求的页面已经临时转移至新的 url\n\n304 Not Modified: 客户端有缓存的文档并发出了一个条件性的请求，服务器告诉客户，原来缓存的文档还可以继续使用\n\n400 Bad Request: 客户端请求有语法错误，不能被服务器所理解\n\n401 Unauthorized: 请求未经许可，这个状态码必须和 WWW-Authenticate 报头域一起使用\n\n403 Forbidden: 对被请求页面的访问被禁止\n\n404 Not Found: 请求资源不存在\n\n500 Internal Server Error: 服务器发生不可预测的错误原来缓存的文档还可以继续使用\n\n503 Server Unavailable: 请求未完成，服务器临时过载或当机，一段时间后可能恢复正常\n\n## 持久链接\n\nHTTP 协议采用“请求-应答”模式，当使用普通模式，即非 Keep-Alive 模式时，每个请求/应答客户和服务器都要新建立一个连接，完成之后立即断开连接（HTTP 协议为无连接的协议）\n\n当使用 Keep-Alive 模式(又称持久连接、连接重用)时，Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或重新建立连接\n\n1.1 才支持持久连接\n\n## 管线化\n\n**在使用持久连接的情况下**，某个连接上消息的传递类似于\n\n请求 1->响应 1->请求 2->响应 2->请求 3->响应 3\n\n某个连接上的消息变成了类似这样\n\n请求 1->请求 2->请求 3->响应 1->响应 2->响应 3\n\n- 管线化机制通过持久连接完成，仅 HTTP/1.1 支持此技术\n- 只有 GET 和 HEAD 请求可以进行管线化，而 POST 则有所限制\n- 初次创建连接时不应启动管线机制，因为对方(服务器)不一定支持 HTTP/1.1 版本的协议\n- 管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变\n- HTTP/1.1 要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可\n- 由于上面提到的服务器端的问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理 程序对管线化的支持并不好，因此现代浏览器如 Chrome 和 Firefox 默认并未开启管线化支持\n\n# 原型链类\n\n创建对象有几种方法\n\n原型、构造函数、实例、原型链\n\ninstanceof 的原理\n\nnew 运算符\n\n## 创建对象的几种方法\n\n// 字面量创建对象\n\nvar o1 = {name:'o1'}\n\nvar o11 = new Object({name:'o11'})\n\n// 显示构造函数创建对象\n\nvar M = function(){this.name = 'o2'}\n\nvar o2 = new M();\n\n// 通过 Object.create\n\nvar P = {name: 'o3'}\n\nvar o3 = Object.create(P)\n\n## new 运算符\n\n一个新对象被创建。它继承自 foo.prototype\n\n​ ↓\n\n构造函数 foo 被执行。执行的时候，相应的传参会被传入，同时上下文（this）会被指定为这个新实例。new foo 等同于 new foo(),只能用在不传递任何参数的情况\n\n​ ↓\n\n如果构造函数返回一个“对象”，那么这个对象会取代整个 new 处理的结果。如果构造函数没有返回对象，那么 new 出来的结果为步骤 1 创建的对象。\n\n```javascript\nvar new2 = function(func) {\n  var o = Object.create(func.prototype) //传入一个构造函数的原型对象来创建对象\n  var k = func.call(o) //上下文（this）会指定为这个新实例\n  if (typeof k === 'object') {\n    return k\n  } else {\n    return o\n  }\n}\n```\n\n# 通信类\n\n什么是同源策略及限制\n\n前后端如何通信\n\n如何创建 Ajax\n\n跨域通信的几种方式\n\n## 什么是同源策略及限制\n\n同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。\n\n这是一个用于隔离潜在恶意文件的关键的安全机制。\n\n- Cookie、LocalStorage 和 IndexDB 无法读取\n\n- DOM 无法获得\n\n- AJAX 请求不能发送\n\n  ​\n\n## 前后端如何通信\n\nAjax\n\nWebSocket\n\nCORS\n\n## 如何创建 Ajax\n\nXMLHttpRequest 对象的工作流程\n\n兼容性处理\n\n事件的触发条件\n\n事件的触发顺序\n\n## 跨域通信的几种方式\n\nJSONP\n\nHash\n\npostMessage\n\nWebSocket\n\nCORS\n\n# 安全类\n\n## CSRF\n\nCSRF,通常称为跨站请求伪造，英文名 Cross-site request forgery\n\n## CSRF 防御措施\n\nToken 验证\n\nReferer 验证\n\n隐藏令牌\n\n## XSS\n\nXSS（cross-site scripting）跨域脚本攻击\n\n# 算法类\n\n排序\n\n堆栈、队列、链表\n\n递归\n\n波兰式和逆波兰式\n\n# 渲染机制\n\n## 什么是 DOCTYPE 及作用\n\nDTD(doucument type definition,文档类型定义)是一系列的语法规则，用来定义 XML 或(x)HTML 的文件类型。浏览器会使用它来判断文档类型，决定使用何种协议来解析，以及切换浏览器模式\n\nDOCTYPE 是用来声明文档类型和 DTD 规范的，一个主要的用途便是文件的合法性验证。如果文件代码不合法，那么浏览器解析时便会出一些差错\n\n## 浏览器渲染过程\n\n## 重排 Reflow\n\n**定义**\n\nDOM 结构中的各个元素都有自己的盒子（模型），这些都需要浏览器根据各种样式来计算并根据计算结果将元素放到它该出现的位置，这个过程称之为 reflow\n\n**触发 Reflow**\n\n当你增加、删除、修改 DOM 节点时，会导致 Reflow 或 Repaint\n\n当你移动 DOM 的位置，或是搞个动画的时候\n\n当你修改 CSS 样式的时候\n\n当你 Resize 窗口的时候（移动端没有这个问题），或是滚动的时候\n\n当你修改网页的默认字体时\n\n## 重绘 Repaint\n\n**定义**\n\n当各种盒子的位置、大小以及其他属性，例如颜色、字体大小等确定下来后，浏览器于是便把这些元素都按照各自的特性绘制一遍，于是页面的内容出现了，这个过程称之为 repaint\n\n**触发 Repaint**\n\nDOM 改动\n\nCSS 改动\n\n## 布局 Layout\n\n# JS 运行机制\n\n异步任务\n\nsetTimeout 和 setInterval\n\nDOM 事件\n\nES6 中的 Promise\n\n# 页面性能\n\n提升页面性能的方法有哪些？\n\n1、资源压缩合并，减少 HTTP 请求\n\n2、非核心代码异步加载->异步加载的方式->异步加载的区别\n\n3、利用浏览器缓存->缓存的分类->缓存的原理\n\n4、使用 CDN\n\n5、预解析 DNS\n\n​ <meta http-equiv=\"x-dns-prefetch-control\" content=\"on\"> // https 中 a 链接打开 DNS 预解析\n\n​ <link rel=\"dns-prefetch\" href=\"//host_name_to_prefetch.com\">\n\n**异步加载**\n\n1、异步加载的方式\n\n​ 1）动态脚本加载 2）defer 3）async\n\n2、异步加载的区别\n\n​ 1）defer 是在 HTML 解析完之后才会执行，如果是多个，按照加载的顺序依次执行\n\n​ 2）async 是在加载之后立即执行，如果是多个，执行顺序和加载顺序无关\n\n**浏览器缓存**\n\n1、缓存的分类\n\n​ 1）强缓存\n\n​ Expires Expires:Thu,21 Jan 2017 23:39:02 GMT\n\n​ Cache-Control Cache-Control:max-age=3600\n\n​ 2）协商缓存\n\n​ Last-Modified If-Modified-Since Last-Modified:Wed,26 Jan 2017 00:35:11 GMT\n\n​ Etag If-None-Match\n\n# 错误监控\n\n前端错误的分类\n\n错误的捕获方式\n\n上报错误的基本原理\n\n**即时运行错误的捕获方式**\n\n1）try…catch 2）window.onerror\n\n**资源加载错误**\n\n1）object.onerror 2）performance.getEntries() 3）Error 事件捕获\n\n**延伸：跨域的 js 运行错误跨域捕获吗，错误提示什么，应该怎么处理？**\n\n1、在 script 标签增加 crossorigin 属性\n\n2、设置 js 资源响应头 Access-Control-Allow-Origin:\\*\n\n**上报错误的基本原理**\n\n1、采用 Ajax 通信的方式上报\n\n2、利用 Image 对象上报\n\n# 业务能力\n\n我做过什么业务？\n\n负责的业务有什么业绩？\n\n使用了什么技术方案？\n\n突破了什么技术难点？\n\n遇到了什么问题？\n\n最大的收获是什么？\n\n# 事物推动能力\n\n主动描述\n\n# 终面\n\n1、职业竞争力\n\n2、职业规划\n\n## 职业竞争力\n\n1、业务能力\n\n2、思考能力\n\n3、学习能力\n\n4、无上限的付出\n\n# 职业规划\n\n1、目标是什么\n\n​ 在业务上成为专家，在技术上成为行业大牛\n\n2、近阶段的目标\n\n​ 不断的学习积累各方面的经验，以学习为主\n\n3、长期目标\n\n​ 做几件很有价值的事情，如开源作品、技术框架等\n\n4、方式方法\n\n​ 先完成业务上的主要问题，做到极致、然后逐步向目标靠拢\n\n# 面试技巧\n\n1、乐观积极\n\n2、主动沟通\n\n3、逻辑顺畅\n\n4、上进有责任心\n\n5、有主张、做事果断\n","source":"_posts/interview.md","raw":"---\ntitle: interview\ndate: 2019-05-22 16:29:49\ntags:\n  - javascript\n  - 技术\n  - 面试\n  - 笔记\ncategories: 笔记\ntype: 'categories'\n---\n\n> imooc 面试笔记\n\n<!--more-->\n\n# DOM 事件\n\n基本概念：DOM 事件级别\n\nDOM 事件级别\n\nDOM 事件流\n\n描述 DOM 事件捕获的具体流程\n\nEvent 对象的常用应用\n\n自定义事件\n\n## DOM 事件类 事件级别\n\nDOM0 element.onclick=function(){}\n\nDOM2 element.addEventListener('click',function(){},false)\n\nDOM3 element.addEventListener('keyup',function(){},false)\n\n## DOM 事件模型\n\n事件模型\n\n​ 捕获 ↓ 冒泡 ↑\n\n## DOM 事件流\n\n三阶段\n\n捕获->目标阶段->冒泡\n\n## 描述 DOM 事件捕获的具体流程\n\nwindow->\n\n​ document->\n\n​ html->\n\n​ body->\n\n​ ….\n\n​ 目标元素\n\n```javascript\nvar ev = document.getElementById('ev')\n\nwindow.addEventListener(\n  'click',\n  function(e) {\n    console.log('window captrue')\n  },\n  true\n)\n\ndocument.addEventListener(\n  'click',\n  function(e) {\n    console.log('document captrue')\n  },\n  true\n)\n\ndocument.documentElement.addEventListener(\n  'click',\n  function(e) {\n    console.log('html captrue')\n  },\n  true\n)\n\ndocument.body.addEventListener(\n  'click',\n  function(e) {\n    console.log('body captrue')\n  },\n  true\n)\n\nev.addEventListener(\n  'click',\n  function(e) {\n    console.log('ev captrue')\n  },\n  true\n)\n```\n\n## Event 对象的常用应用\n\nevent.preventDefault() //阻止默认行为\n\nEvent.stopPropagation() //阻止冒泡行为\n\nEvent.stopImmediatePropagation()\n\n​ //同一元素绑定两个点击事件 A 和 B 在事件 A 中使用该事件 Event.stopImmediatePropagation()可以阻止事件 B 的触发\n\nEvent.currentTarget //当前绑定的事件\n\nEvent.target //当前被点击的元素\n\n## 自定义事件\n\n```Javascript\nvar eve = new Event('custome');\nel.addEventListener('custome',function(){\n  console.log('custome');\n});\nel.dispatchEvent(eve)\n```\n\nCustomEvent 可以添加参数\n\n# HTTP 协议类\n\nHTTP 协议的主要特点\n\nHTTP 报文的组成部分\n\nHTTP 方法\n\nPOST 和 GET 的区别\n\nHTTP 状态码\n\n什么是持久链接\n\n什么是管线化\n\n## HTTP 协议的主要特点\n\n### 简单快速\n\n​ 每个资源(URI)都是固定的\n\n### 灵活\n\n​ 通过头部分，一个 HTTP 协议可以完成不同数据类型的传输\n\n### 无连接\n\n​ 连接一次，它就会断掉，不会保持连接\n\n### 无状态\n\n​ 单从 HTTP 协议上，是不能区分两次连接者的身份的\n\n## HTTP 报文的组成部分\n\n### 请求报文\n\n​ 请求行\n\n​ http 方法、页面地址、http 协议、版本\n\n​ 请求头\n\n​ 空行\n\n​ 请求体\n\n### 响应报文\n\n​ 状态行\n\n​ 响应头\n\n​ 空行\n\n​ 响应体\n\n## HTTP 协议类\n\n### HTTP 方法\n\n​ GET 获取资源\n\n​ POST 传输资源\n\n​ PUT 更新资源\n\n​ DELETE 删除资源\n\n​ HEAD 获得报文首部\n\n## POST 和 GET 的区别\n\n- GET 在浏览器回退时是无害的，而 POST 会再次提交请求\n\n- GET 产生的 URL 地址可以被收藏，而 POST 不可以\n\n- GET 请求会被浏览器主动缓存，而 POST 不会，除非手动设置\n\n- GET 请求只能进行 url 编码，而 POST 支持多种编码方式\n\n- GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留\n\n- GET 请求在 URL 中传送的参数是有长度限制的，而 POST 没有限制\n\n- 对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制\n\n- GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息\n\n- GET 参数通过 URL 传递，POST 放在 Request body 中\n\n## HTTP 状态码\n\n1xx: 指示信息-表示请求已接受，继续处理\n\n2xx: 成功-表示请求已被成功接受\n\n3xx: 重定向-要完成请求必须进行更进一步的操作\n\n4xx: 客户端错误-请求语法错误或请求无法实现\n\n5xx: 服务器错误-服务器未能实现合法的请求\n\n200 OK : 客户端请求成功\n\n206 Partial Content: 客户发送了一个带有 Range 头的 GET 请求，服务器完成了它\n\n301 Moved Permanently: 所请求的页面已经转移至新的 url\n\n302 Found: 所请求的页面已经临时转移至新的 url\n\n304 Not Modified: 客户端有缓存的文档并发出了一个条件性的请求，服务器告诉客户，原来缓存的文档还可以继续使用\n\n400 Bad Request: 客户端请求有语法错误，不能被服务器所理解\n\n401 Unauthorized: 请求未经许可，这个状态码必须和 WWW-Authenticate 报头域一起使用\n\n403 Forbidden: 对被请求页面的访问被禁止\n\n404 Not Found: 请求资源不存在\n\n500 Internal Server Error: 服务器发生不可预测的错误原来缓存的文档还可以继续使用\n\n503 Server Unavailable: 请求未完成，服务器临时过载或当机，一段时间后可能恢复正常\n\n## 持久链接\n\nHTTP 协议采用“请求-应答”模式，当使用普通模式，即非 Keep-Alive 模式时，每个请求/应答客户和服务器都要新建立一个连接，完成之后立即断开连接（HTTP 协议为无连接的协议）\n\n当使用 Keep-Alive 模式(又称持久连接、连接重用)时，Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或重新建立连接\n\n1.1 才支持持久连接\n\n## 管线化\n\n**在使用持久连接的情况下**，某个连接上消息的传递类似于\n\n请求 1->响应 1->请求 2->响应 2->请求 3->响应 3\n\n某个连接上的消息变成了类似这样\n\n请求 1->请求 2->请求 3->响应 1->响应 2->响应 3\n\n- 管线化机制通过持久连接完成，仅 HTTP/1.1 支持此技术\n- 只有 GET 和 HEAD 请求可以进行管线化，而 POST 则有所限制\n- 初次创建连接时不应启动管线机制，因为对方(服务器)不一定支持 HTTP/1.1 版本的协议\n- 管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变\n- HTTP/1.1 要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可\n- 由于上面提到的服务器端的问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理 程序对管线化的支持并不好，因此现代浏览器如 Chrome 和 Firefox 默认并未开启管线化支持\n\n# 原型链类\n\n创建对象有几种方法\n\n原型、构造函数、实例、原型链\n\ninstanceof 的原理\n\nnew 运算符\n\n## 创建对象的几种方法\n\n// 字面量创建对象\n\nvar o1 = {name:'o1'}\n\nvar o11 = new Object({name:'o11'})\n\n// 显示构造函数创建对象\n\nvar M = function(){this.name = 'o2'}\n\nvar o2 = new M();\n\n// 通过 Object.create\n\nvar P = {name: 'o3'}\n\nvar o3 = Object.create(P)\n\n## new 运算符\n\n一个新对象被创建。它继承自 foo.prototype\n\n​ ↓\n\n构造函数 foo 被执行。执行的时候，相应的传参会被传入，同时上下文（this）会被指定为这个新实例。new foo 等同于 new foo(),只能用在不传递任何参数的情况\n\n​ ↓\n\n如果构造函数返回一个“对象”，那么这个对象会取代整个 new 处理的结果。如果构造函数没有返回对象，那么 new 出来的结果为步骤 1 创建的对象。\n\n```javascript\nvar new2 = function(func) {\n  var o = Object.create(func.prototype) //传入一个构造函数的原型对象来创建对象\n  var k = func.call(o) //上下文（this）会指定为这个新实例\n  if (typeof k === 'object') {\n    return k\n  } else {\n    return o\n  }\n}\n```\n\n# 通信类\n\n什么是同源策略及限制\n\n前后端如何通信\n\n如何创建 Ajax\n\n跨域通信的几种方式\n\n## 什么是同源策略及限制\n\n同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。\n\n这是一个用于隔离潜在恶意文件的关键的安全机制。\n\n- Cookie、LocalStorage 和 IndexDB 无法读取\n\n- DOM 无法获得\n\n- AJAX 请求不能发送\n\n  ​\n\n## 前后端如何通信\n\nAjax\n\nWebSocket\n\nCORS\n\n## 如何创建 Ajax\n\nXMLHttpRequest 对象的工作流程\n\n兼容性处理\n\n事件的触发条件\n\n事件的触发顺序\n\n## 跨域通信的几种方式\n\nJSONP\n\nHash\n\npostMessage\n\nWebSocket\n\nCORS\n\n# 安全类\n\n## CSRF\n\nCSRF,通常称为跨站请求伪造，英文名 Cross-site request forgery\n\n## CSRF 防御措施\n\nToken 验证\n\nReferer 验证\n\n隐藏令牌\n\n## XSS\n\nXSS（cross-site scripting）跨域脚本攻击\n\n# 算法类\n\n排序\n\n堆栈、队列、链表\n\n递归\n\n波兰式和逆波兰式\n\n# 渲染机制\n\n## 什么是 DOCTYPE 及作用\n\nDTD(doucument type definition,文档类型定义)是一系列的语法规则，用来定义 XML 或(x)HTML 的文件类型。浏览器会使用它来判断文档类型，决定使用何种协议来解析，以及切换浏览器模式\n\nDOCTYPE 是用来声明文档类型和 DTD 规范的，一个主要的用途便是文件的合法性验证。如果文件代码不合法，那么浏览器解析时便会出一些差错\n\n## 浏览器渲染过程\n\n## 重排 Reflow\n\n**定义**\n\nDOM 结构中的各个元素都有自己的盒子（模型），这些都需要浏览器根据各种样式来计算并根据计算结果将元素放到它该出现的位置，这个过程称之为 reflow\n\n**触发 Reflow**\n\n当你增加、删除、修改 DOM 节点时，会导致 Reflow 或 Repaint\n\n当你移动 DOM 的位置，或是搞个动画的时候\n\n当你修改 CSS 样式的时候\n\n当你 Resize 窗口的时候（移动端没有这个问题），或是滚动的时候\n\n当你修改网页的默认字体时\n\n## 重绘 Repaint\n\n**定义**\n\n当各种盒子的位置、大小以及其他属性，例如颜色、字体大小等确定下来后，浏览器于是便把这些元素都按照各自的特性绘制一遍，于是页面的内容出现了，这个过程称之为 repaint\n\n**触发 Repaint**\n\nDOM 改动\n\nCSS 改动\n\n## 布局 Layout\n\n# JS 运行机制\n\n异步任务\n\nsetTimeout 和 setInterval\n\nDOM 事件\n\nES6 中的 Promise\n\n# 页面性能\n\n提升页面性能的方法有哪些？\n\n1、资源压缩合并，减少 HTTP 请求\n\n2、非核心代码异步加载->异步加载的方式->异步加载的区别\n\n3、利用浏览器缓存->缓存的分类->缓存的原理\n\n4、使用 CDN\n\n5、预解析 DNS\n\n​ <meta http-equiv=\"x-dns-prefetch-control\" content=\"on\"> // https 中 a 链接打开 DNS 预解析\n\n​ <link rel=\"dns-prefetch\" href=\"//host_name_to_prefetch.com\">\n\n**异步加载**\n\n1、异步加载的方式\n\n​ 1）动态脚本加载 2）defer 3）async\n\n2、异步加载的区别\n\n​ 1）defer 是在 HTML 解析完之后才会执行，如果是多个，按照加载的顺序依次执行\n\n​ 2）async 是在加载之后立即执行，如果是多个，执行顺序和加载顺序无关\n\n**浏览器缓存**\n\n1、缓存的分类\n\n​ 1）强缓存\n\n​ Expires Expires:Thu,21 Jan 2017 23:39:02 GMT\n\n​ Cache-Control Cache-Control:max-age=3600\n\n​ 2）协商缓存\n\n​ Last-Modified If-Modified-Since Last-Modified:Wed,26 Jan 2017 00:35:11 GMT\n\n​ Etag If-None-Match\n\n# 错误监控\n\n前端错误的分类\n\n错误的捕获方式\n\n上报错误的基本原理\n\n**即时运行错误的捕获方式**\n\n1）try…catch 2）window.onerror\n\n**资源加载错误**\n\n1）object.onerror 2）performance.getEntries() 3）Error 事件捕获\n\n**延伸：跨域的 js 运行错误跨域捕获吗，错误提示什么，应该怎么处理？**\n\n1、在 script 标签增加 crossorigin 属性\n\n2、设置 js 资源响应头 Access-Control-Allow-Origin:\\*\n\n**上报错误的基本原理**\n\n1、采用 Ajax 通信的方式上报\n\n2、利用 Image 对象上报\n\n# 业务能力\n\n我做过什么业务？\n\n负责的业务有什么业绩？\n\n使用了什么技术方案？\n\n突破了什么技术难点？\n\n遇到了什么问题？\n\n最大的收获是什么？\n\n# 事物推动能力\n\n主动描述\n\n# 终面\n\n1、职业竞争力\n\n2、职业规划\n\n## 职业竞争力\n\n1、业务能力\n\n2、思考能力\n\n3、学习能力\n\n4、无上限的付出\n\n# 职业规划\n\n1、目标是什么\n\n​ 在业务上成为专家，在技术上成为行业大牛\n\n2、近阶段的目标\n\n​ 不断的学习积累各方面的经验，以学习为主\n\n3、长期目标\n\n​ 做几件很有价值的事情，如开源作品、技术框架等\n\n4、方式方法\n\n​ 先完成业务上的主要问题，做到极致、然后逐步向目标靠拢\n\n# 面试技巧\n\n1、乐观积极\n\n2、主动沟通\n\n3、逻辑顺畅\n\n4、上进有责任心\n\n5、有主张、做事果断\n","slug":"interview","published":1,"updated":"2019-05-22T08:49:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvz0jehb0006yrwmqx0vyd2e","content":"<blockquote>\n<p>imooc 面试笔记</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"DOM-事件\"><a href=\"#DOM-事件\" class=\"headerlink\" title=\"DOM 事件\"></a>DOM 事件</h1><p>基本概念：DOM 事件级别</p>\n<p>DOM 事件级别</p>\n<p>DOM 事件流</p>\n<p>描述 DOM 事件捕获的具体流程</p>\n<p>Event 对象的常用应用</p>\n<p>自定义事件</p>\n<h2 id=\"DOM-事件类-事件级别\"><a href=\"#DOM-事件类-事件级别\" class=\"headerlink\" title=\"DOM 事件类 事件级别\"></a>DOM 事件类 事件级别</h2><p>DOM0 element.onclick=function(){}</p>\n<p>DOM2 element.addEventListener(‘click’,function(){},false)</p>\n<p>DOM3 element.addEventListener(‘keyup’,function(){},false)</p>\n<h2 id=\"DOM-事件模型\"><a href=\"#DOM-事件模型\" class=\"headerlink\" title=\"DOM 事件模型\"></a>DOM 事件模型</h2><p>事件模型</p>\n<p>​ 捕获 ↓ 冒泡 ↑</p>\n<h2 id=\"DOM-事件流\"><a href=\"#DOM-事件流\" class=\"headerlink\" title=\"DOM 事件流\"></a>DOM 事件流</h2><p>三阶段</p>\n<p>捕获-&gt;目标阶段-&gt;冒泡</p>\n<h2 id=\"描述-DOM-事件捕获的具体流程\"><a href=\"#描述-DOM-事件捕获的具体流程\" class=\"headerlink\" title=\"描述 DOM 事件捕获的具体流程\"></a>描述 DOM 事件捕获的具体流程</h2><p>window-&gt;</p>\n<p>​ document-&gt;</p>\n<p>​ html-&gt;</p>\n<p>​ body-&gt;</p>\n<p>​ ….</p>\n<p>​ 目标元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ev = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'ev'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">'click'</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'window captrue'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">'click'</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'document captrue'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">'click'</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'html captrue'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">'click'</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body captrue'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">ev.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">'click'</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'ev captrue'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Event-对象的常用应用\"><a href=\"#Event-对象的常用应用\" class=\"headerlink\" title=\"Event 对象的常用应用\"></a>Event 对象的常用应用</h2><p>event.preventDefault() //阻止默认行为</p>\n<p>Event.stopPropagation() //阻止冒泡行为</p>\n<p>Event.stopImmediatePropagation()</p>\n<p>​ //同一元素绑定两个点击事件 A 和 B 在事件 A 中使用该事件 Event.stopImmediatePropagation()可以阻止事件 B 的触发</p>\n<p>Event.currentTarget //当前绑定的事件</p>\n<p>Event.target //当前被点击的元素</p>\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> eve = <span class=\"keyword\">new</span> Event(<span class=\"string\">'custome'</span>);</span><br><span class=\"line\">el.addEventListener(<span class=\"string\">'custome'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'custome'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">el.dispatchEvent(eve)</span><br></pre></td></tr></table></figure>\n<p>CustomEvent 可以添加参数</p>\n<h1 id=\"HTTP-协议类\"><a href=\"#HTTP-协议类\" class=\"headerlink\" title=\"HTTP 协议类\"></a>HTTP 协议类</h1><p>HTTP 协议的主要特点</p>\n<p>HTTP 报文的组成部分</p>\n<p>HTTP 方法</p>\n<p>POST 和 GET 的区别</p>\n<p>HTTP 状态码</p>\n<p>什么是持久链接</p>\n<p>什么是管线化</p>\n<h2 id=\"HTTP-协议的主要特点\"><a href=\"#HTTP-协议的主要特点\" class=\"headerlink\" title=\"HTTP 协议的主要特点\"></a>HTTP 协议的主要特点</h2><h3 id=\"简单快速\"><a href=\"#简单快速\" class=\"headerlink\" title=\"简单快速\"></a>简单快速</h3><p>​ 每个资源(URI)都是固定的</p>\n<h3 id=\"灵活\"><a href=\"#灵活\" class=\"headerlink\" title=\"灵活\"></a>灵活</h3><p>​ 通过头部分，一个 HTTP 协议可以完成不同数据类型的传输</p>\n<h3 id=\"无连接\"><a href=\"#无连接\" class=\"headerlink\" title=\"无连接\"></a>无连接</h3><p>​ 连接一次，它就会断掉，不会保持连接</p>\n<h3 id=\"无状态\"><a href=\"#无状态\" class=\"headerlink\" title=\"无状态\"></a>无状态</h3><p>​ 单从 HTTP 协议上，是不能区分两次连接者的身份的</p>\n<h2 id=\"HTTP-报文的组成部分\"><a href=\"#HTTP-报文的组成部分\" class=\"headerlink\" title=\"HTTP 报文的组成部分\"></a>HTTP 报文的组成部分</h2><h3 id=\"请求报文\"><a href=\"#请求报文\" class=\"headerlink\" title=\"请求报文\"></a>请求报文</h3><p>​ 请求行</p>\n<p>​ http 方法、页面地址、http 协议、版本</p>\n<p>​ 请求头</p>\n<p>​ 空行</p>\n<p>​ 请求体</p>\n<h3 id=\"响应报文\"><a href=\"#响应报文\" class=\"headerlink\" title=\"响应报文\"></a>响应报文</h3><p>​ 状态行</p>\n<p>​ 响应头</p>\n<p>​ 空行</p>\n<p>​ 响应体</p>\n<h2 id=\"HTTP-协议类-1\"><a href=\"#HTTP-协议类-1\" class=\"headerlink\" title=\"HTTP 协议类\"></a>HTTP 协议类</h2><h3 id=\"HTTP-方法\"><a href=\"#HTTP-方法\" class=\"headerlink\" title=\"HTTP 方法\"></a>HTTP 方法</h3><p>​ GET 获取资源</p>\n<p>​ POST 传输资源</p>\n<p>​ PUT 更新资源</p>\n<p>​ DELETE 删除资源</p>\n<p>​ HEAD 获得报文首部</p>\n<h2 id=\"POST-和-GET-的区别\"><a href=\"#POST-和-GET-的区别\" class=\"headerlink\" title=\"POST 和 GET 的区别\"></a>POST 和 GET 的区别</h2><ul>\n<li><p>GET 在浏览器回退时是无害的，而 POST 会再次提交请求</p>\n</li>\n<li><p>GET 产生的 URL 地址可以被收藏，而 POST 不可以</p>\n</li>\n<li><p>GET 请求会被浏览器主动缓存，而 POST 不会，除非手动设置</p>\n</li>\n<li><p>GET 请求只能进行 url 编码，而 POST 支持多种编码方式</p>\n</li>\n<li><p>GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留</p>\n</li>\n<li><p>GET 请求在 URL 中传送的参数是有长度限制的，而 POST 没有限制</p>\n</li>\n<li><p>对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制</p>\n</li>\n<li><p>GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息</p>\n</li>\n<li><p>GET 参数通过 URL 传递，POST 放在 Request body 中</p>\n</li>\n</ul>\n<h2 id=\"HTTP-状态码\"><a href=\"#HTTP-状态码\" class=\"headerlink\" title=\"HTTP 状态码\"></a>HTTP 状态码</h2><p>1xx: 指示信息-表示请求已接受，继续处理</p>\n<p>2xx: 成功-表示请求已被成功接受</p>\n<p>3xx: 重定向-要完成请求必须进行更进一步的操作</p>\n<p>4xx: 客户端错误-请求语法错误或请求无法实现</p>\n<p>5xx: 服务器错误-服务器未能实现合法的请求</p>\n<p>200 OK : 客户端请求成功</p>\n<p>206 Partial Content: 客户发送了一个带有 Range 头的 GET 请求，服务器完成了它</p>\n<p>301 Moved Permanently: 所请求的页面已经转移至新的 url</p>\n<p>302 Found: 所请求的页面已经临时转移至新的 url</p>\n<p>304 Not Modified: 客户端有缓存的文档并发出了一个条件性的请求，服务器告诉客户，原来缓存的文档还可以继续使用</p>\n<p>400 Bad Request: 客户端请求有语法错误，不能被服务器所理解</p>\n<p>401 Unauthorized: 请求未经许可，这个状态码必须和 WWW-Authenticate 报头域一起使用</p>\n<p>403 Forbidden: 对被请求页面的访问被禁止</p>\n<p>404 Not Found: 请求资源不存在</p>\n<p>500 Internal Server Error: 服务器发生不可预测的错误原来缓存的文档还可以继续使用</p>\n<p>503 Server Unavailable: 请求未完成，服务器临时过载或当机，一段时间后可能恢复正常</p>\n<h2 id=\"持久链接\"><a href=\"#持久链接\" class=\"headerlink\" title=\"持久链接\"></a>持久链接</h2><p>HTTP 协议采用“请求-应答”模式，当使用普通模式，即非 Keep-Alive 模式时，每个请求/应答客户和服务器都要新建立一个连接，完成之后立即断开连接（HTTP 协议为无连接的协议）</p>\n<p>当使用 Keep-Alive 模式(又称持久连接、连接重用)时，Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或重新建立连接</p>\n<p>1.1 才支持持久连接</p>\n<h2 id=\"管线化\"><a href=\"#管线化\" class=\"headerlink\" title=\"管线化\"></a>管线化</h2><p><strong>在使用持久连接的情况下</strong>，某个连接上消息的传递类似于</p>\n<p>请求 1-&gt;响应 1-&gt;请求 2-&gt;响应 2-&gt;请求 3-&gt;响应 3</p>\n<p>某个连接上的消息变成了类似这样</p>\n<p>请求 1-&gt;请求 2-&gt;请求 3-&gt;响应 1-&gt;响应 2-&gt;响应 3</p>\n<ul>\n<li>管线化机制通过持久连接完成，仅 HTTP/1.1 支持此技术</li>\n<li>只有 GET 和 HEAD 请求可以进行管线化，而 POST 则有所限制</li>\n<li>初次创建连接时不应启动管线机制，因为对方(服务器)不一定支持 HTTP/1.1 版本的协议</li>\n<li>管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变</li>\n<li>HTTP/1.1 要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可</li>\n<li>由于上面提到的服务器端的问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理 程序对管线化的支持并不好，因此现代浏览器如 Chrome 和 Firefox 默认并未开启管线化支持</li>\n</ul>\n<h1 id=\"原型链类\"><a href=\"#原型链类\" class=\"headerlink\" title=\"原型链类\"></a>原型链类</h1><p>创建对象有几种方法</p>\n<p>原型、构造函数、实例、原型链</p>\n<p>instanceof 的原理</p>\n<p>new 运算符</p>\n<h2 id=\"创建对象的几种方法\"><a href=\"#创建对象的几种方法\" class=\"headerlink\" title=\"创建对象的几种方法\"></a>创建对象的几种方法</h2><p>// 字面量创建对象</p>\n<p>var o1 = {name:’o1’}</p>\n<p>var o11 = new Object({name:’o11’})</p>\n<p>// 显示构造函数创建对象</p>\n<p>var M = function(){this.name = ‘o2’}</p>\n<p>var o2 = new M();</p>\n<p>// 通过 Object.create</p>\n<p>var P = {name: ‘o3’}</p>\n<p>var o3 = Object.create(P)</p>\n<h2 id=\"new-运算符\"><a href=\"#new-运算符\" class=\"headerlink\" title=\"new 运算符\"></a>new 运算符</h2><p>一个新对象被创建。它继承自 foo.prototype</p>\n<p>​ ↓</p>\n<p>构造函数 foo 被执行。执行的时候，相应的传参会被传入，同时上下文（this）会被指定为这个新实例。new foo 等同于 new foo(),只能用在不传递任何参数的情况</p>\n<p>​ ↓</p>\n<p>如果构造函数返回一个“对象”，那么这个对象会取代整个 new 处理的结果。如果构造函数没有返回对象，那么 new 出来的结果为步骤 1 创建的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = <span class=\"built_in\">Object</span>.create(func.prototype) <span class=\"comment\">//传入一个构造函数的原型对象来创建对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> k = func.call(o) <span class=\"comment\">//上下文（this）会指定为这个新实例</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> k === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> k</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"通信类\"><a href=\"#通信类\" class=\"headerlink\" title=\"通信类\"></a>通信类</h1><p>什么是同源策略及限制</p>\n<p>前后端如何通信</p>\n<p>如何创建 Ajax</p>\n<p>跨域通信的几种方式</p>\n<h2 id=\"什么是同源策略及限制\"><a href=\"#什么是同源策略及限制\" class=\"headerlink\" title=\"什么是同源策略及限制\"></a>什么是同源策略及限制</h2><p>同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。</p>\n<p>这是一个用于隔离潜在恶意文件的关键的安全机制。</p>\n<ul>\n<li><p>Cookie、LocalStorage 和 IndexDB 无法读取</p>\n</li>\n<li><p>DOM 无法获得</p>\n</li>\n<li><p>AJAX 请求不能发送</p>\n<p>​</p>\n</li>\n</ul>\n<h2 id=\"前后端如何通信\"><a href=\"#前后端如何通信\" class=\"headerlink\" title=\"前后端如何通信\"></a>前后端如何通信</h2><p>Ajax</p>\n<p>WebSocket</p>\n<p>CORS</p>\n<h2 id=\"如何创建-Ajax\"><a href=\"#如何创建-Ajax\" class=\"headerlink\" title=\"如何创建 Ajax\"></a>如何创建 Ajax</h2><p>XMLHttpRequest 对象的工作流程</p>\n<p>兼容性处理</p>\n<p>事件的触发条件</p>\n<p>事件的触发顺序</p>\n<h2 id=\"跨域通信的几种方式\"><a href=\"#跨域通信的几种方式\" class=\"headerlink\" title=\"跨域通信的几种方式\"></a>跨域通信的几种方式</h2><p>JSONP</p>\n<p>Hash</p>\n<p>postMessage</p>\n<p>WebSocket</p>\n<p>CORS</p>\n<h1 id=\"安全类\"><a href=\"#安全类\" class=\"headerlink\" title=\"安全类\"></a>安全类</h1><h2 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h2><p>CSRF,通常称为跨站请求伪造，英文名 Cross-site request forgery</p>\n<h2 id=\"CSRF-防御措施\"><a href=\"#CSRF-防御措施\" class=\"headerlink\" title=\"CSRF 防御措施\"></a>CSRF 防御措施</h2><p>Token 验证</p>\n<p>Referer 验证</p>\n<p>隐藏令牌</p>\n<h2 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h2><p>XSS（cross-site scripting）跨域脚本攻击</p>\n<h1 id=\"算法类\"><a href=\"#算法类\" class=\"headerlink\" title=\"算法类\"></a>算法类</h1><p>排序</p>\n<p>堆栈、队列、链表</p>\n<p>递归</p>\n<p>波兰式和逆波兰式</p>\n<h1 id=\"渲染机制\"><a href=\"#渲染机制\" class=\"headerlink\" title=\"渲染机制\"></a>渲染机制</h1><h2 id=\"什么是-DOCTYPE-及作用\"><a href=\"#什么是-DOCTYPE-及作用\" class=\"headerlink\" title=\"什么是 DOCTYPE 及作用\"></a>什么是 DOCTYPE 及作用</h2><p>DTD(doucument type definition,文档类型定义)是一系列的语法规则，用来定义 XML 或(x)HTML 的文件类型。浏览器会使用它来判断文档类型，决定使用何种协议来解析，以及切换浏览器模式</p>\n<p>DOCTYPE 是用来声明文档类型和 DTD 规范的，一个主要的用途便是文件的合法性验证。如果文件代码不合法，那么浏览器解析时便会出一些差错</p>\n<h2 id=\"浏览器渲染过程\"><a href=\"#浏览器渲染过程\" class=\"headerlink\" title=\"浏览器渲染过程\"></a>浏览器渲染过程</h2><h2 id=\"重排-Reflow\"><a href=\"#重排-Reflow\" class=\"headerlink\" title=\"重排 Reflow\"></a>重排 Reflow</h2><p><strong>定义</strong></p>\n<p>DOM 结构中的各个元素都有自己的盒子（模型），这些都需要浏览器根据各种样式来计算并根据计算结果将元素放到它该出现的位置，这个过程称之为 reflow</p>\n<p><strong>触发 Reflow</strong></p>\n<p>当你增加、删除、修改 DOM 节点时，会导致 Reflow 或 Repaint</p>\n<p>当你移动 DOM 的位置，或是搞个动画的时候</p>\n<p>当你修改 CSS 样式的时候</p>\n<p>当你 Resize 窗口的时候（移动端没有这个问题），或是滚动的时候</p>\n<p>当你修改网页的默认字体时</p>\n<h2 id=\"重绘-Repaint\"><a href=\"#重绘-Repaint\" class=\"headerlink\" title=\"重绘 Repaint\"></a>重绘 Repaint</h2><p><strong>定义</strong></p>\n<p>当各种盒子的位置、大小以及其他属性，例如颜色、字体大小等确定下来后，浏览器于是便把这些元素都按照各自的特性绘制一遍，于是页面的内容出现了，这个过程称之为 repaint</p>\n<p><strong>触发 Repaint</strong></p>\n<p>DOM 改动</p>\n<p>CSS 改动</p>\n<h2 id=\"布局-Layout\"><a href=\"#布局-Layout\" class=\"headerlink\" title=\"布局 Layout\"></a>布局 Layout</h2><h1 id=\"JS-运行机制\"><a href=\"#JS-运行机制\" class=\"headerlink\" title=\"JS 运行机制\"></a>JS 运行机制</h1><p>异步任务</p>\n<p>setTimeout 和 setInterval</p>\n<p>DOM 事件</p>\n<p>ES6 中的 Promise</p>\n<h1 id=\"页面性能\"><a href=\"#页面性能\" class=\"headerlink\" title=\"页面性能\"></a>页面性能</h1><p>提升页面性能的方法有哪些？</p>\n<p>1、资源压缩合并，减少 HTTP 请求</p>\n<p>2、非核心代码异步加载-&gt;异步加载的方式-&gt;异步加载的区别</p>\n<p>3、利用浏览器缓存-&gt;缓存的分类-&gt;缓存的原理</p>\n<p>4、使用 CDN</p>\n<p>5、预解析 DNS</p>\n<p>​ <meta http-equiv=\"x-dns-prefetch-control\" content=\"on\"> // https 中 a 链接打开 DNS 预解析</p>\n<p>​ <link rel=\"dns-prefetch\" href=\"//host_name_to_prefetch.com\"></p>\n<p><strong>异步加载</strong></p>\n<p>1、异步加载的方式</p>\n<p>​ 1）动态脚本加载 2）defer 3）async</p>\n<p>2、异步加载的区别</p>\n<p>​ 1）defer 是在 HTML 解析完之后才会执行，如果是多个，按照加载的顺序依次执行</p>\n<p>​ 2）async 是在加载之后立即执行，如果是多个，执行顺序和加载顺序无关</p>\n<p><strong>浏览器缓存</strong></p>\n<p>1、缓存的分类</p>\n<p>​ 1）强缓存</p>\n<p>​ Expires Expires:Thu,21 Jan 2017 23:39:02 GMT</p>\n<p>​ Cache-Control Cache-Control:max-age=3600</p>\n<p>​ 2）协商缓存</p>\n<p>​ Last-Modified If-Modified-Since Last-Modified:Wed,26 Jan 2017 00:35:11 GMT</p>\n<p>​ Etag If-None-Match</p>\n<h1 id=\"错误监控\"><a href=\"#错误监控\" class=\"headerlink\" title=\"错误监控\"></a>错误监控</h1><p>前端错误的分类</p>\n<p>错误的捕获方式</p>\n<p>上报错误的基本原理</p>\n<p><strong>即时运行错误的捕获方式</strong></p>\n<p>1）try…catch 2）window.onerror</p>\n<p><strong>资源加载错误</strong></p>\n<p>1）object.onerror 2）performance.getEntries() 3）Error 事件捕获</p>\n<p><strong>延伸：跨域的 js 运行错误跨域捕获吗，错误提示什么，应该怎么处理？</strong></p>\n<p>1、在 script 标签增加 crossorigin 属性</p>\n<p>2、设置 js 资源响应头 Access-Control-Allow-Origin:*</p>\n<p><strong>上报错误的基本原理</strong></p>\n<p>1、采用 Ajax 通信的方式上报</p>\n<p>2、利用 Image 对象上报</p>\n<h1 id=\"业务能力\"><a href=\"#业务能力\" class=\"headerlink\" title=\"业务能力\"></a>业务能力</h1><p>我做过什么业务？</p>\n<p>负责的业务有什么业绩？</p>\n<p>使用了什么技术方案？</p>\n<p>突破了什么技术难点？</p>\n<p>遇到了什么问题？</p>\n<p>最大的收获是什么？</p>\n<h1 id=\"事物推动能力\"><a href=\"#事物推动能力\" class=\"headerlink\" title=\"事物推动能力\"></a>事物推动能力</h1><p>主动描述</p>\n<h1 id=\"终面\"><a href=\"#终面\" class=\"headerlink\" title=\"终面\"></a>终面</h1><p>1、职业竞争力</p>\n<p>2、职业规划</p>\n<h2 id=\"职业竞争力\"><a href=\"#职业竞争力\" class=\"headerlink\" title=\"职业竞争力\"></a>职业竞争力</h2><p>1、业务能力</p>\n<p>2、思考能力</p>\n<p>3、学习能力</p>\n<p>4、无上限的付出</p>\n<h1 id=\"职业规划\"><a href=\"#职业规划\" class=\"headerlink\" title=\"职业规划\"></a>职业规划</h1><p>1、目标是什么</p>\n<p>​ 在业务上成为专家，在技术上成为行业大牛</p>\n<p>2、近阶段的目标</p>\n<p>​ 不断的学习积累各方面的经验，以学习为主</p>\n<p>3、长期目标</p>\n<p>​ 做几件很有价值的事情，如开源作品、技术框架等</p>\n<p>4、方式方法</p>\n<p>​ 先完成业务上的主要问题，做到极致、然后逐步向目标靠拢</p>\n<h1 id=\"面试技巧\"><a href=\"#面试技巧\" class=\"headerlink\" title=\"面试技巧\"></a>面试技巧</h1><p>1、乐观积极</p>\n<p>2、主动沟通</p>\n<p>3、逻辑顺畅</p>\n<p>4、上进有责任心</p>\n<p>5、有主张、做事果断</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>imooc 面试笔记</p>\n</blockquote>","more":"<h1 id=\"DOM-事件\"><a href=\"#DOM-事件\" class=\"headerlink\" title=\"DOM 事件\"></a>DOM 事件</h1><p>基本概念：DOM 事件级别</p>\n<p>DOM 事件级别</p>\n<p>DOM 事件流</p>\n<p>描述 DOM 事件捕获的具体流程</p>\n<p>Event 对象的常用应用</p>\n<p>自定义事件</p>\n<h2 id=\"DOM-事件类-事件级别\"><a href=\"#DOM-事件类-事件级别\" class=\"headerlink\" title=\"DOM 事件类 事件级别\"></a>DOM 事件类 事件级别</h2><p>DOM0 element.onclick=function(){}</p>\n<p>DOM2 element.addEventListener(‘click’,function(){},false)</p>\n<p>DOM3 element.addEventListener(‘keyup’,function(){},false)</p>\n<h2 id=\"DOM-事件模型\"><a href=\"#DOM-事件模型\" class=\"headerlink\" title=\"DOM 事件模型\"></a>DOM 事件模型</h2><p>事件模型</p>\n<p>​ 捕获 ↓ 冒泡 ↑</p>\n<h2 id=\"DOM-事件流\"><a href=\"#DOM-事件流\" class=\"headerlink\" title=\"DOM 事件流\"></a>DOM 事件流</h2><p>三阶段</p>\n<p>捕获-&gt;目标阶段-&gt;冒泡</p>\n<h2 id=\"描述-DOM-事件捕获的具体流程\"><a href=\"#描述-DOM-事件捕获的具体流程\" class=\"headerlink\" title=\"描述 DOM 事件捕获的具体流程\"></a>描述 DOM 事件捕获的具体流程</h2><p>window-&gt;</p>\n<p>​ document-&gt;</p>\n<p>​ html-&gt;</p>\n<p>​ body-&gt;</p>\n<p>​ ….</p>\n<p>​ 目标元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ev = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'ev'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">'click'</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'window captrue'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">'click'</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'document captrue'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.documentElement.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">'click'</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'html captrue'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">'click'</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'body captrue'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">ev.addEventListener(</span><br><span class=\"line\">  <span class=\"string\">'click'</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'ev captrue'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"literal\">true</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Event-对象的常用应用\"><a href=\"#Event-对象的常用应用\" class=\"headerlink\" title=\"Event 对象的常用应用\"></a>Event 对象的常用应用</h2><p>event.preventDefault() //阻止默认行为</p>\n<p>Event.stopPropagation() //阻止冒泡行为</p>\n<p>Event.stopImmediatePropagation()</p>\n<p>​ //同一元素绑定两个点击事件 A 和 B 在事件 A 中使用该事件 Event.stopImmediatePropagation()可以阻止事件 B 的触发</p>\n<p>Event.currentTarget //当前绑定的事件</p>\n<p>Event.target //当前被点击的元素</p>\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> eve = <span class=\"keyword\">new</span> Event(<span class=\"string\">'custome'</span>);</span><br><span class=\"line\">el.addEventListener(<span class=\"string\">'custome'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'custome'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">el.dispatchEvent(eve)</span><br></pre></td></tr></table></figure>\n<p>CustomEvent 可以添加参数</p>\n<h1 id=\"HTTP-协议类\"><a href=\"#HTTP-协议类\" class=\"headerlink\" title=\"HTTP 协议类\"></a>HTTP 协议类</h1><p>HTTP 协议的主要特点</p>\n<p>HTTP 报文的组成部分</p>\n<p>HTTP 方法</p>\n<p>POST 和 GET 的区别</p>\n<p>HTTP 状态码</p>\n<p>什么是持久链接</p>\n<p>什么是管线化</p>\n<h2 id=\"HTTP-协议的主要特点\"><a href=\"#HTTP-协议的主要特点\" class=\"headerlink\" title=\"HTTP 协议的主要特点\"></a>HTTP 协议的主要特点</h2><h3 id=\"简单快速\"><a href=\"#简单快速\" class=\"headerlink\" title=\"简单快速\"></a>简单快速</h3><p>​ 每个资源(URI)都是固定的</p>\n<h3 id=\"灵活\"><a href=\"#灵活\" class=\"headerlink\" title=\"灵活\"></a>灵活</h3><p>​ 通过头部分，一个 HTTP 协议可以完成不同数据类型的传输</p>\n<h3 id=\"无连接\"><a href=\"#无连接\" class=\"headerlink\" title=\"无连接\"></a>无连接</h3><p>​ 连接一次，它就会断掉，不会保持连接</p>\n<h3 id=\"无状态\"><a href=\"#无状态\" class=\"headerlink\" title=\"无状态\"></a>无状态</h3><p>​ 单从 HTTP 协议上，是不能区分两次连接者的身份的</p>\n<h2 id=\"HTTP-报文的组成部分\"><a href=\"#HTTP-报文的组成部分\" class=\"headerlink\" title=\"HTTP 报文的组成部分\"></a>HTTP 报文的组成部分</h2><h3 id=\"请求报文\"><a href=\"#请求报文\" class=\"headerlink\" title=\"请求报文\"></a>请求报文</h3><p>​ 请求行</p>\n<p>​ http 方法、页面地址、http 协议、版本</p>\n<p>​ 请求头</p>\n<p>​ 空行</p>\n<p>​ 请求体</p>\n<h3 id=\"响应报文\"><a href=\"#响应报文\" class=\"headerlink\" title=\"响应报文\"></a>响应报文</h3><p>​ 状态行</p>\n<p>​ 响应头</p>\n<p>​ 空行</p>\n<p>​ 响应体</p>\n<h2 id=\"HTTP-协议类-1\"><a href=\"#HTTP-协议类-1\" class=\"headerlink\" title=\"HTTP 协议类\"></a>HTTP 协议类</h2><h3 id=\"HTTP-方法\"><a href=\"#HTTP-方法\" class=\"headerlink\" title=\"HTTP 方法\"></a>HTTP 方法</h3><p>​ GET 获取资源</p>\n<p>​ POST 传输资源</p>\n<p>​ PUT 更新资源</p>\n<p>​ DELETE 删除资源</p>\n<p>​ HEAD 获得报文首部</p>\n<h2 id=\"POST-和-GET-的区别\"><a href=\"#POST-和-GET-的区别\" class=\"headerlink\" title=\"POST 和 GET 的区别\"></a>POST 和 GET 的区别</h2><ul>\n<li><p>GET 在浏览器回退时是无害的，而 POST 会再次提交请求</p>\n</li>\n<li><p>GET 产生的 URL 地址可以被收藏，而 POST 不可以</p>\n</li>\n<li><p>GET 请求会被浏览器主动缓存，而 POST 不会，除非手动设置</p>\n</li>\n<li><p>GET 请求只能进行 url 编码，而 POST 支持多种编码方式</p>\n</li>\n<li><p>GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留</p>\n</li>\n<li><p>GET 请求在 URL 中传送的参数是有长度限制的，而 POST 没有限制</p>\n</li>\n<li><p>对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制</p>\n</li>\n<li><p>GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息</p>\n</li>\n<li><p>GET 参数通过 URL 传递，POST 放在 Request body 中</p>\n</li>\n</ul>\n<h2 id=\"HTTP-状态码\"><a href=\"#HTTP-状态码\" class=\"headerlink\" title=\"HTTP 状态码\"></a>HTTP 状态码</h2><p>1xx: 指示信息-表示请求已接受，继续处理</p>\n<p>2xx: 成功-表示请求已被成功接受</p>\n<p>3xx: 重定向-要完成请求必须进行更进一步的操作</p>\n<p>4xx: 客户端错误-请求语法错误或请求无法实现</p>\n<p>5xx: 服务器错误-服务器未能实现合法的请求</p>\n<p>200 OK : 客户端请求成功</p>\n<p>206 Partial Content: 客户发送了一个带有 Range 头的 GET 请求，服务器完成了它</p>\n<p>301 Moved Permanently: 所请求的页面已经转移至新的 url</p>\n<p>302 Found: 所请求的页面已经临时转移至新的 url</p>\n<p>304 Not Modified: 客户端有缓存的文档并发出了一个条件性的请求，服务器告诉客户，原来缓存的文档还可以继续使用</p>\n<p>400 Bad Request: 客户端请求有语法错误，不能被服务器所理解</p>\n<p>401 Unauthorized: 请求未经许可，这个状态码必须和 WWW-Authenticate 报头域一起使用</p>\n<p>403 Forbidden: 对被请求页面的访问被禁止</p>\n<p>404 Not Found: 请求资源不存在</p>\n<p>500 Internal Server Error: 服务器发生不可预测的错误原来缓存的文档还可以继续使用</p>\n<p>503 Server Unavailable: 请求未完成，服务器临时过载或当机，一段时间后可能恢复正常</p>\n<h2 id=\"持久链接\"><a href=\"#持久链接\" class=\"headerlink\" title=\"持久链接\"></a>持久链接</h2><p>HTTP 协议采用“请求-应答”模式，当使用普通模式，即非 Keep-Alive 模式时，每个请求/应答客户和服务器都要新建立一个连接，完成之后立即断开连接（HTTP 协议为无连接的协议）</p>\n<p>当使用 Keep-Alive 模式(又称持久连接、连接重用)时，Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或重新建立连接</p>\n<p>1.1 才支持持久连接</p>\n<h2 id=\"管线化\"><a href=\"#管线化\" class=\"headerlink\" title=\"管线化\"></a>管线化</h2><p><strong>在使用持久连接的情况下</strong>，某个连接上消息的传递类似于</p>\n<p>请求 1-&gt;响应 1-&gt;请求 2-&gt;响应 2-&gt;请求 3-&gt;响应 3</p>\n<p>某个连接上的消息变成了类似这样</p>\n<p>请求 1-&gt;请求 2-&gt;请求 3-&gt;响应 1-&gt;响应 2-&gt;响应 3</p>\n<ul>\n<li>管线化机制通过持久连接完成，仅 HTTP/1.1 支持此技术</li>\n<li>只有 GET 和 HEAD 请求可以进行管线化，而 POST 则有所限制</li>\n<li>初次创建连接时不应启动管线机制，因为对方(服务器)不一定支持 HTTP/1.1 版本的协议</li>\n<li>管线化不会影响响应到来的顺序，如上面的例子所示，响应返回的顺序并未改变</li>\n<li>HTTP/1.1 要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只是要求对于管线化的请求不失败即可</li>\n<li>由于上面提到的服务器端的问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理 程序对管线化的支持并不好，因此现代浏览器如 Chrome 和 Firefox 默认并未开启管线化支持</li>\n</ul>\n<h1 id=\"原型链类\"><a href=\"#原型链类\" class=\"headerlink\" title=\"原型链类\"></a>原型链类</h1><p>创建对象有几种方法</p>\n<p>原型、构造函数、实例、原型链</p>\n<p>instanceof 的原理</p>\n<p>new 运算符</p>\n<h2 id=\"创建对象的几种方法\"><a href=\"#创建对象的几种方法\" class=\"headerlink\" title=\"创建对象的几种方法\"></a>创建对象的几种方法</h2><p>// 字面量创建对象</p>\n<p>var o1 = {name:’o1’}</p>\n<p>var o11 = new Object({name:’o11’})</p>\n<p>// 显示构造函数创建对象</p>\n<p>var M = function(){this.name = ‘o2’}</p>\n<p>var o2 = new M();</p>\n<p>// 通过 Object.create</p>\n<p>var P = {name: ‘o3’}</p>\n<p>var o3 = Object.create(P)</p>\n<h2 id=\"new-运算符\"><a href=\"#new-运算符\" class=\"headerlink\" title=\"new 运算符\"></a>new 运算符</h2><p>一个新对象被创建。它继承自 foo.prototype</p>\n<p>​ ↓</p>\n<p>构造函数 foo 被执行。执行的时候，相应的传参会被传入，同时上下文（this）会被指定为这个新实例。new foo 等同于 new foo(),只能用在不传递任何参数的情况</p>\n<p>​ ↓</p>\n<p>如果构造函数返回一个“对象”，那么这个对象会取代整个 new 处理的结果。如果构造函数没有返回对象，那么 new 出来的结果为步骤 1 创建的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = <span class=\"built_in\">Object</span>.create(func.prototype) <span class=\"comment\">//传入一个构造函数的原型对象来创建对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> k = func.call(o) <span class=\"comment\">//上下文（this）会指定为这个新实例</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> k === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> k</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"通信类\"><a href=\"#通信类\" class=\"headerlink\" title=\"通信类\"></a>通信类</h1><p>什么是同源策略及限制</p>\n<p>前后端如何通信</p>\n<p>如何创建 Ajax</p>\n<p>跨域通信的几种方式</p>\n<h2 id=\"什么是同源策略及限制\"><a href=\"#什么是同源策略及限制\" class=\"headerlink\" title=\"什么是同源策略及限制\"></a>什么是同源策略及限制</h2><p>同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。</p>\n<p>这是一个用于隔离潜在恶意文件的关键的安全机制。</p>\n<ul>\n<li><p>Cookie、LocalStorage 和 IndexDB 无法读取</p>\n</li>\n<li><p>DOM 无法获得</p>\n</li>\n<li><p>AJAX 请求不能发送</p>\n<p>​</p>\n</li>\n</ul>\n<h2 id=\"前后端如何通信\"><a href=\"#前后端如何通信\" class=\"headerlink\" title=\"前后端如何通信\"></a>前后端如何通信</h2><p>Ajax</p>\n<p>WebSocket</p>\n<p>CORS</p>\n<h2 id=\"如何创建-Ajax\"><a href=\"#如何创建-Ajax\" class=\"headerlink\" title=\"如何创建 Ajax\"></a>如何创建 Ajax</h2><p>XMLHttpRequest 对象的工作流程</p>\n<p>兼容性处理</p>\n<p>事件的触发条件</p>\n<p>事件的触发顺序</p>\n<h2 id=\"跨域通信的几种方式\"><a href=\"#跨域通信的几种方式\" class=\"headerlink\" title=\"跨域通信的几种方式\"></a>跨域通信的几种方式</h2><p>JSONP</p>\n<p>Hash</p>\n<p>postMessage</p>\n<p>WebSocket</p>\n<p>CORS</p>\n<h1 id=\"安全类\"><a href=\"#安全类\" class=\"headerlink\" title=\"安全类\"></a>安全类</h1><h2 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h2><p>CSRF,通常称为跨站请求伪造，英文名 Cross-site request forgery</p>\n<h2 id=\"CSRF-防御措施\"><a href=\"#CSRF-防御措施\" class=\"headerlink\" title=\"CSRF 防御措施\"></a>CSRF 防御措施</h2><p>Token 验证</p>\n<p>Referer 验证</p>\n<p>隐藏令牌</p>\n<h2 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h2><p>XSS（cross-site scripting）跨域脚本攻击</p>\n<h1 id=\"算法类\"><a href=\"#算法类\" class=\"headerlink\" title=\"算法类\"></a>算法类</h1><p>排序</p>\n<p>堆栈、队列、链表</p>\n<p>递归</p>\n<p>波兰式和逆波兰式</p>\n<h1 id=\"渲染机制\"><a href=\"#渲染机制\" class=\"headerlink\" title=\"渲染机制\"></a>渲染机制</h1><h2 id=\"什么是-DOCTYPE-及作用\"><a href=\"#什么是-DOCTYPE-及作用\" class=\"headerlink\" title=\"什么是 DOCTYPE 及作用\"></a>什么是 DOCTYPE 及作用</h2><p>DTD(doucument type definition,文档类型定义)是一系列的语法规则，用来定义 XML 或(x)HTML 的文件类型。浏览器会使用它来判断文档类型，决定使用何种协议来解析，以及切换浏览器模式</p>\n<p>DOCTYPE 是用来声明文档类型和 DTD 规范的，一个主要的用途便是文件的合法性验证。如果文件代码不合法，那么浏览器解析时便会出一些差错</p>\n<h2 id=\"浏览器渲染过程\"><a href=\"#浏览器渲染过程\" class=\"headerlink\" title=\"浏览器渲染过程\"></a>浏览器渲染过程</h2><h2 id=\"重排-Reflow\"><a href=\"#重排-Reflow\" class=\"headerlink\" title=\"重排 Reflow\"></a>重排 Reflow</h2><p><strong>定义</strong></p>\n<p>DOM 结构中的各个元素都有自己的盒子（模型），这些都需要浏览器根据各种样式来计算并根据计算结果将元素放到它该出现的位置，这个过程称之为 reflow</p>\n<p><strong>触发 Reflow</strong></p>\n<p>当你增加、删除、修改 DOM 节点时，会导致 Reflow 或 Repaint</p>\n<p>当你移动 DOM 的位置，或是搞个动画的时候</p>\n<p>当你修改 CSS 样式的时候</p>\n<p>当你 Resize 窗口的时候（移动端没有这个问题），或是滚动的时候</p>\n<p>当你修改网页的默认字体时</p>\n<h2 id=\"重绘-Repaint\"><a href=\"#重绘-Repaint\" class=\"headerlink\" title=\"重绘 Repaint\"></a>重绘 Repaint</h2><p><strong>定义</strong></p>\n<p>当各种盒子的位置、大小以及其他属性，例如颜色、字体大小等确定下来后，浏览器于是便把这些元素都按照各自的特性绘制一遍，于是页面的内容出现了，这个过程称之为 repaint</p>\n<p><strong>触发 Repaint</strong></p>\n<p>DOM 改动</p>\n<p>CSS 改动</p>\n<h2 id=\"布局-Layout\"><a href=\"#布局-Layout\" class=\"headerlink\" title=\"布局 Layout\"></a>布局 Layout</h2><h1 id=\"JS-运行机制\"><a href=\"#JS-运行机制\" class=\"headerlink\" title=\"JS 运行机制\"></a>JS 运行机制</h1><p>异步任务</p>\n<p>setTimeout 和 setInterval</p>\n<p>DOM 事件</p>\n<p>ES6 中的 Promise</p>\n<h1 id=\"页面性能\"><a href=\"#页面性能\" class=\"headerlink\" title=\"页面性能\"></a>页面性能</h1><p>提升页面性能的方法有哪些？</p>\n<p>1、资源压缩合并，减少 HTTP 请求</p>\n<p>2、非核心代码异步加载-&gt;异步加载的方式-&gt;异步加载的区别</p>\n<p>3、利用浏览器缓存-&gt;缓存的分类-&gt;缓存的原理</p>\n<p>4、使用 CDN</p>\n<p>5、预解析 DNS</p>\n<p>​ <meta http-equiv=\"x-dns-prefetch-control\" content=\"on\"> // https 中 a 链接打开 DNS 预解析</p>\n<p>​ <link rel=\"dns-prefetch\" href=\"//host_name_to_prefetch.com\"></p>\n<p><strong>异步加载</strong></p>\n<p>1、异步加载的方式</p>\n<p>​ 1）动态脚本加载 2）defer 3）async</p>\n<p>2、异步加载的区别</p>\n<p>​ 1）defer 是在 HTML 解析完之后才会执行，如果是多个，按照加载的顺序依次执行</p>\n<p>​ 2）async 是在加载之后立即执行，如果是多个，执行顺序和加载顺序无关</p>\n<p><strong>浏览器缓存</strong></p>\n<p>1、缓存的分类</p>\n<p>​ 1）强缓存</p>\n<p>​ Expires Expires:Thu,21 Jan 2017 23:39:02 GMT</p>\n<p>​ Cache-Control Cache-Control:max-age=3600</p>\n<p>​ 2）协商缓存</p>\n<p>​ Last-Modified If-Modified-Since Last-Modified:Wed,26 Jan 2017 00:35:11 GMT</p>\n<p>​ Etag If-None-Match</p>\n<h1 id=\"错误监控\"><a href=\"#错误监控\" class=\"headerlink\" title=\"错误监控\"></a>错误监控</h1><p>前端错误的分类</p>\n<p>错误的捕获方式</p>\n<p>上报错误的基本原理</p>\n<p><strong>即时运行错误的捕获方式</strong></p>\n<p>1）try…catch 2）window.onerror</p>\n<p><strong>资源加载错误</strong></p>\n<p>1）object.onerror 2）performance.getEntries() 3）Error 事件捕获</p>\n<p><strong>延伸：跨域的 js 运行错误跨域捕获吗，错误提示什么，应该怎么处理？</strong></p>\n<p>1、在 script 标签增加 crossorigin 属性</p>\n<p>2、设置 js 资源响应头 Access-Control-Allow-Origin:*</p>\n<p><strong>上报错误的基本原理</strong></p>\n<p>1、采用 Ajax 通信的方式上报</p>\n<p>2、利用 Image 对象上报</p>\n<h1 id=\"业务能力\"><a href=\"#业务能力\" class=\"headerlink\" title=\"业务能力\"></a>业务能力</h1><p>我做过什么业务？</p>\n<p>负责的业务有什么业绩？</p>\n<p>使用了什么技术方案？</p>\n<p>突破了什么技术难点？</p>\n<p>遇到了什么问题？</p>\n<p>最大的收获是什么？</p>\n<h1 id=\"事物推动能力\"><a href=\"#事物推动能力\" class=\"headerlink\" title=\"事物推动能力\"></a>事物推动能力</h1><p>主动描述</p>\n<h1 id=\"终面\"><a href=\"#终面\" class=\"headerlink\" title=\"终面\"></a>终面</h1><p>1、职业竞争力</p>\n<p>2、职业规划</p>\n<h2 id=\"职业竞争力\"><a href=\"#职业竞争力\" class=\"headerlink\" title=\"职业竞争力\"></a>职业竞争力</h2><p>1、业务能力</p>\n<p>2、思考能力</p>\n<p>3、学习能力</p>\n<p>4、无上限的付出</p>\n<h1 id=\"职业规划\"><a href=\"#职业规划\" class=\"headerlink\" title=\"职业规划\"></a>职业规划</h1><p>1、目标是什么</p>\n<p>​ 在业务上成为专家，在技术上成为行业大牛</p>\n<p>2、近阶段的目标</p>\n<p>​ 不断的学习积累各方面的经验，以学习为主</p>\n<p>3、长期目标</p>\n<p>​ 做几件很有价值的事情，如开源作品、技术框架等</p>\n<p>4、方式方法</p>\n<p>​ 先完成业务上的主要问题，做到极致、然后逐步向目标靠拢</p>\n<h1 id=\"面试技巧\"><a href=\"#面试技巧\" class=\"headerlink\" title=\"面试技巧\"></a>面试技巧</h1><p>1、乐观积极</p>\n<p>2、主动沟通</p>\n<p>3、逻辑顺畅</p>\n<p>4、上进有责任心</p>\n<p>5、有主张、做事果断</p>"},{"title":"3.11","date":"2019-03-11T07:40:14.000Z","type":"categories","password":896566,"abstract":"Welcome to my blog, enter password to read.","message":"Welcome to my blog, enter password to read.","_content":"\n> 又是一年的 3 月,依然记得 2018 的 3 月 11 日,我们第一次相遇\n\n<!--more-->\n\n那是我们故事的开始,依稀记得两周后 3 月 24 日的第一次出游漫步东湖，晚饭到群星城,4 月 1 日的第一次电影-头号玩家,在后湖城市广场，然而晚饭带不吃辣的你去了川霸味道(调皮脸),饭后在停车场是我第一次牵起你的手...\n\n就此,我们的故事开始...\n","source":"_posts/myFirst.md","raw":"---\ntitle: 3.11\ndate: 2019-03-11 15:40:14\ntags:\n  - 情感\ncategories: 随笔\ntype: 'categories'\npassword: 896566\nabstract: Welcome to my blog, enter password to read.\nmessage: Welcome to my blog, enter password to read.\n---\n\n> 又是一年的 3 月,依然记得 2018 的 3 月 11 日,我们第一次相遇\n\n<!--more-->\n\n那是我们故事的开始,依稀记得两周后 3 月 24 日的第一次出游漫步东湖，晚饭到群星城,4 月 1 日的第一次电影-头号玩家,在后湖城市广场，然而晚饭带不吃辣的你去了川霸味道(调皮脸),饭后在停车场是我第一次牵起你的手...\n\n就此,我们的故事开始...\n","slug":"myFirst","published":1,"updated":"2019-05-22T08:19:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvz0jehd0008yrwmdu4o8pi1","content":"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n<div id=\"hbe-security\">\n  <div class=\"hbe-input-container\">\n  <input type=\"password\" class=\"hbe-form-control\" id=\"pass\" placeholder=\"Welcome to my blog, enter password to read.\" />\n    <label for=\"pass\">Welcome to my blog, enter password to read.</label>\n    <div class=\"bottom-line\"></div>\n  </div>\n</div>\n<div id=\"decryptionError\" style=\"display: none;\">Incorrect Password!</div>\n<div id=\"noContentError\" style=\"display: none;\">No content to display!</div>\n<div id=\"encrypt-blog\" style=\"display:none\">\nU2FsdGVkX19f5FfgOnsnnnUFcovJcGhlioQ1urD2ONSwXJEB245DBJSWDvfLODvMVLLmj/zODitBwnnDlhhUPaFemE03DFXKZSFnl1nwdECiLr4CtCaXjlaWKuXBtoBFeWUO3MMK3wvvMip6aRrWKcL9eQDoRNmbMix0UlH6F7v2tnVM0kg7hxs4Lt6gB2gftBESbXiFtB8RdfKQTbgdohk5CXTUlBYer49v1MeIz7FjmA/I11NH0UrwYtsIBSJJyT5SWttYV8odNIGn435eYIQukY112F/sSM+ofo7NCvVCZSX/lfTfjcHCqIOmZgC824netjHExdzz1sDgUxSoAPq6q0JDZJqsn+NFc2ZNfQrmH7kpTGgxY+RCsIFRRkS7FZ/pXKdsHcJFFF3RSygyEAOv890DOq9Z3Z5D1HA4uEXyS03slPA8Zy2VbmQsi4Q2l8YMFqo9Rr0xf+zYABsVQq0RJDNfVX/ACuPv/pVf5Z2JgoCD45BIDqvcLbPePoccuN0/aGs/TBUh1USnAJAhHqjIu6E2UNC+4ie8QGzJM6i3T/p+StQTdVyQsJWnumG3ABqjg3VbCt1EJ7LfDcp24aquxEMZBTitlX1GmWFSacNgCGEt39LPirXzY+3Fhk6mKmDr2F6p8UM6Xz0yruLFsUOYMHFXuhQRPXmzhURp4NwcGw63y5tvSpVXyU9vFByoJokNCe2tUQO2C65mhonSMseyuGYvUJY3YH8caebjoU6CvFiO+TJIirhH5QM4A1bHGoI+TYQ6b1+olpRapOnl3ZQXGWzn4j0dcbltLa35GIbwXjD8pPAOobJvv1HDqsEXHES5BrvsvxitTAj/nDxU6TfnUxKnARQ5UvEeql8iCkXHJa6E1Nf6rUsl81qRbwJNWyqZi/H40JRJHWU13vLpQPs/ncYm2f4TP77sflCcDJE9mPWxjL9KcK5VspgeoF4nr1V4IpCpHrjeCD3aRFe22sXFtYqzytLPgdxuUf5VYxI2FDNd1owoBQXIg5UW52bDm8T8mfa26a9Olz8gGpBmhi8m+RHSaJ5JYMELccyTjCjLPQnXgY8eNnH+FLGPCYEbfq2lii0bV4B8VRtj2YXiPXF1Lfl7UxSMyLXvDM/rLMcOslGJ2qAd1DBKBPeDprn/E6eahuH1xH0IEHc5m/vqKM3GQek96sHqua+HedUKBUJRQn0unRAFaG6AFI2n40IjSzXxjJHT4cb3o+fCJ4g9n+4MAxBgORtniPPtX/2iq6zClJ5uKVZpxKC1l0RF6TgbLcqReMtTpmPP4OlZCfHZGrW/DIb7fPUGwESLWME6rr7Uob/a7i5mfpaN0FV4vY38Gk3AIUevivV/S3idKjjnfAlrGGWmyyuST8gZaMUnLGsl7DFLfwoGM5fF9Sbjx7OpIm+4PL/quCHx5nj+HKdSXRwWq62667jAYkDcIP33di7Tu1v48vUrWXoNnGGsp3UHGXx/4EDf/dhstLcsVvlAH2hYHfKoIfYSU34aDU2qERoGkJNUwG8EFMWbBY8O5012BXKOwHukej2n8skHOrC5rPxcoDl4iwiXhlD2ufd39BmG502pAeUBoVyv7bbk6c6vWDtc/raeD+a02iPnym5iAkllNr1EF/zBE5X08/RrKXwta+uIPZkfZ1CIU5AduffR8Qnjk7qZ45jxIuLfQaoEoxhrH5REN4ZMPxU2Z4cyJV0=\n</div>\n<script src=\"/lib/crypto-js.js\"></script><script src=\"/lib/blog-encrypt.js\"></script><link href=\"/css/blog-encrypt.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{}},"excerpt":"Welcome to my blog, enter password to read.","more":"Welcome to my blog, enter password to read.","origin":"<blockquote>\n<p>又是一年的 3 月,依然记得 2018 的 3 月 11 日,我们第一次相遇</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>那是我们故事的开始,依稀记得两周后 3 月 24 日的第一次出游漫步东湖，晚饭到群星城,4 月 1 日的第一次电影-头号玩家,在后湖城市广场，然而晚饭带不吃辣的你去了川霸味道(调皮脸),饭后在停车场是我第一次牵起你的手…</p>\n<p>就此,我们的故事开始…</p>\n","encrypt":true,"template":"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n<div id=\"hbe-security\">\n  <div class=\"hbe-input-container\">\n  <input type=\"password\" class=\"hbe-form-control\" id=\"pass\" placeholder=\"Welcome to my blog, enter password to read.\" />\n    <label for=\"pass\">Welcome to my blog, enter password to read.</label>\n    <div class=\"bottom-line\"></div>\n  </div>\n</div>\n<div id=\"decryptionError\" style=\"display: none;\">Incorrect Password!</div>\n<div id=\"noContentError\" style=\"display: none;\">No content to display!</div>\n<div id=\"encrypt-blog\" style=\"display:none\">\nU2FsdGVkX19f5FfgOnsnnnUFcovJcGhlioQ1urD2ONSwXJEB245DBJSWDvfLODvMVLLmj/zODitBwnnDlhhUPaFemE03DFXKZSFnl1nwdECiLr4CtCaXjlaWKuXBtoBFeWUO3MMK3wvvMip6aRrWKcL9eQDoRNmbMix0UlH6F7v2tnVM0kg7hxs4Lt6gB2gftBESbXiFtB8RdfKQTbgdohk5CXTUlBYer49v1MeIz7FjmA/I11NH0UrwYtsIBSJJyT5SWttYV8odNIGn435eYIQukY112F/sSM+ofo7NCvVCZSX/lfTfjcHCqIOmZgC824netjHExdzz1sDgUxSoAPq6q0JDZJqsn+NFc2ZNfQrmH7kpTGgxY+RCsIFRRkS7FZ/pXKdsHcJFFF3RSygyEAOv890DOq9Z3Z5D1HA4uEXyS03slPA8Zy2VbmQsi4Q2l8YMFqo9Rr0xf+zYABsVQq0RJDNfVX/ACuPv/pVf5Z2JgoCD45BIDqvcLbPePoccuN0/aGs/TBUh1USnAJAhHqjIu6E2UNC+4ie8QGzJM6i3T/p+StQTdVyQsJWnumG3ABqjg3VbCt1EJ7LfDcp24aquxEMZBTitlX1GmWFSacNgCGEt39LPirXzY+3Fhk6mKmDr2F6p8UM6Xz0yruLFsUOYMHFXuhQRPXmzhURp4NwcGw63y5tvSpVXyU9vFByoJokNCe2tUQO2C65mhonSMseyuGYvUJY3YH8caebjoU6CvFiO+TJIirhH5QM4A1bHGoI+TYQ6b1+olpRapOnl3ZQXGWzn4j0dcbltLa35GIbwXjD8pPAOobJvv1HDqsEXHES5BrvsvxitTAj/nDxU6TfnUxKnARQ5UvEeql8iCkXHJa6E1Nf6rUsl81qRbwJNWyqZi/H40JRJHWU13vLpQPs/ncYm2f4TP77sflCcDJE9mPWxjL9KcK5VspgeoF4nr1V4IpCpHrjeCD3aRFe22sXFtYqzytLPgdxuUf5VYxI2FDNd1owoBQXIg5UW52bDm8T8mfa26a9Olz8gGpBmhi8m+RHSaJ5JYMELccyTjCjLPQnXgY8eNnH+FLGPCYEbfq2lii0bV4B8VRtj2YXiPXF1Lfl7UxSMyLXvDM/rLMcOslGJ2qAd1DBKBPeDprn/E6eahuH1xH0IEHc5m/vqKM3GQek96sHqua+HedUKBUJRQn0unRAFaG6AFI2n40IjSzXxjJHT4cb3o+fCJ4g9n+4MAxBgORtniPPtX/2iq6zClJ5uKVZpxKC1l0RF6TgbLcqReMtTpmPP4OlZCfHZGrW/DIb7fPUGwESLWME6rr7Uob/a7i5mfpaN0FV4vY38Gk3AIUevivV/S3idKjjnfAlrGGWmyyuST8gZaMUnLGsl7DFLfwoGM5fF9Sbjx7OpIm+4PL/quCHx5nj+HKdSXRwWq62667jAYkDcIP33di7Tu1v48vUrWXoNnGGsp3UHGXx/4EDf/dhstLcsVvlAH2hYHfKoIfYSU34aDU2qERoGkJNUwG8EFMWbBY8O5012BXKOwHukej2n8skHOrC5rPxcoDl4iwiXhlD2ufd39BmG502pAeUBoVyv7bbk6c6vWDtc/raeD+a02iPnym5iAkllNr1EF/zBE5X08/RrKXwta+uIPZkfZ1CIU5AduffR8Qnjk7qZ45jxIuLfQaoEoxhrH5REN4ZMPxU2Z4cyJV0=\n</div>\n","decryptionError":"Incorrect Password!","noContentError":"No content to display!"},{"title":"我的macOS常用软件及配置","date":"2019-05-22T09:13:08.000Z","_content":"\n> 记录我的某些常用软件及配置，方便以后查看。\n\n<!--more-->\n\n# 破解软件下载地址\n\n<a href =\"https://xclient.info/\">精品 MAC 应用分享</a>\n<a href =\"https://www.macbl.com/\">马可菠萝</a>\n\n# 软件\n\n- chrome & chrome 插件\n  划词翻译\n  web 前端助手（FeHelper）\n\n- 可能需要用到的\n  MacBooster 7（清理垃圾、内存）\n  Dr. Unarchiver（解压）\n  iStatistica（查看内存、网络、网速、等等）\n\n---\n\n- Sourcetree（git）\n- SmartSVN（svn）\n- 微信开发者工具\n- Navicat Premium（数据库）\n- Sublime Text3（编辑器）\n- MAMP PRO（服务器）\n- Postman（接口）\n- Charles（抓包）\n- Vscode（编译器）\n\n---\n\n# 配置\n\n## vscode\n\n```javascript\n{\n\"editor.detectIndentation\": false,\n// 重新设定 tabsize\n\"editor.tabSize\": 2,\n// #每次保存的时候自动格式化\n\"editor.formatOnSave\": true,\n// #每次保存的时候将代码按 eslint 格式进行修复\n\"eslint.autoFixOnSave\": true,\n// 添加 vue 支持\n\"eslint.validate\": [\n\"javascript\",\n\"javascriptreact\",\n{\n\"language\": \"vue\",\n\"autoFix\": true\n}\n],\n// #让 prettier 使用 eslint 的代码格式进行校验\n\"prettier.eslintIntegration\": true,\n// #去掉代码结尾的分号\n\"prettier.semi\": false,\n// #使用带引号替代双引号\n\"prettier.singleQuote\": true,\n// #让函数(名)和后面的括号之间加个空格\n\"javascript.format.insertSpaceBeforeFunctionParenthesis\": true,\n// #这个按用户自身习惯选择\n\"vetur.format.defaultFormatter.html\": \"js-beautify-html\",\n// #让 vue 中的 js 按编辑器自带的 ts 格式进行格式化\n\"vetur.format.defaultFormatter.js\": \"vscode-typescript\",\n\"vetur.format.defaultFormatterOptions\": {\n\"js-beautify-html\": {\n\"wrap_attributes\": \"force-aligned\"\n// #vue 组件中 html 代码格式化样式\n}\n},\n// 格式化 stylus, 需安装 Manta's Stylus Supremacy 插件\n\"stylusSupremacy.insertColons\": false, // 是否插入冒号\n\"stylusSupremacy.insertSemicolons\": false, // 是否插入分好\n\"stylusSupremacy.insertBraces\": false, // 是否插入大括号\n\"stylusSupremacy.insertNewLineAroundImports\": false, // import 之后是否换行\n\"stylusSupremacy.insertNewLineAroundBlocks\": false, // 两个选择器中是否换行\n\"eslint.options\": {\n\"plugins\": [\"html\"]\n},\n\"editor.fontSize\": 13\n}\n```\n","source":"_posts/我的macOS常用软件及配置.md","raw":"---\ntitle: 我的macOS常用软件及配置\ndate: 2019-05-22 17:13:08\ntags:\n  - 配置\n  - 软件下载\n---\n\n> 记录我的某些常用软件及配置，方便以后查看。\n\n<!--more-->\n\n# 破解软件下载地址\n\n<a href =\"https://xclient.info/\">精品 MAC 应用分享</a>\n<a href =\"https://www.macbl.com/\">马可菠萝</a>\n\n# 软件\n\n- chrome & chrome 插件\n  划词翻译\n  web 前端助手（FeHelper）\n\n- 可能需要用到的\n  MacBooster 7（清理垃圾、内存）\n  Dr. Unarchiver（解压）\n  iStatistica（查看内存、网络、网速、等等）\n\n---\n\n- Sourcetree（git）\n- SmartSVN（svn）\n- 微信开发者工具\n- Navicat Premium（数据库）\n- Sublime Text3（编辑器）\n- MAMP PRO（服务器）\n- Postman（接口）\n- Charles（抓包）\n- Vscode（编译器）\n\n---\n\n# 配置\n\n## vscode\n\n```javascript\n{\n\"editor.detectIndentation\": false,\n// 重新设定 tabsize\n\"editor.tabSize\": 2,\n// #每次保存的时候自动格式化\n\"editor.formatOnSave\": true,\n// #每次保存的时候将代码按 eslint 格式进行修复\n\"eslint.autoFixOnSave\": true,\n// 添加 vue 支持\n\"eslint.validate\": [\n\"javascript\",\n\"javascriptreact\",\n{\n\"language\": \"vue\",\n\"autoFix\": true\n}\n],\n// #让 prettier 使用 eslint 的代码格式进行校验\n\"prettier.eslintIntegration\": true,\n// #去掉代码结尾的分号\n\"prettier.semi\": false,\n// #使用带引号替代双引号\n\"prettier.singleQuote\": true,\n// #让函数(名)和后面的括号之间加个空格\n\"javascript.format.insertSpaceBeforeFunctionParenthesis\": true,\n// #这个按用户自身习惯选择\n\"vetur.format.defaultFormatter.html\": \"js-beautify-html\",\n// #让 vue 中的 js 按编辑器自带的 ts 格式进行格式化\n\"vetur.format.defaultFormatter.js\": \"vscode-typescript\",\n\"vetur.format.defaultFormatterOptions\": {\n\"js-beautify-html\": {\n\"wrap_attributes\": \"force-aligned\"\n// #vue 组件中 html 代码格式化样式\n}\n},\n// 格式化 stylus, 需安装 Manta's Stylus Supremacy 插件\n\"stylusSupremacy.insertColons\": false, // 是否插入冒号\n\"stylusSupremacy.insertSemicolons\": false, // 是否插入分好\n\"stylusSupremacy.insertBraces\": false, // 是否插入大括号\n\"stylusSupremacy.insertNewLineAroundImports\": false, // import 之后是否换行\n\"stylusSupremacy.insertNewLineAroundBlocks\": false, // 两个选择器中是否换行\n\"eslint.options\": {\n\"plugins\": [\"html\"]\n},\n\"editor.fontSize\": 13\n}\n```\n","slug":"我的macOS常用软件及配置","published":1,"updated":"2019-05-23T02:17:44.000Z","_id":"cjvz0jehe0009yrwmdytjlb9l","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>记录我的某些常用软件及配置，方便以后查看。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"破解软件下载地址\"><a href=\"#破解软件下载地址\" class=\"headerlink\" title=\"破解软件下载地址\"></a>破解软件下载地址</h1><p><a href=\"https://xclient.info/\" target=\"_blank\" rel=\"noopener\">精品 MAC 应用分享</a><br><a href=\"https://www.macbl.com/\" target=\"_blank\" rel=\"noopener\">马可菠萝</a></p>\n<h1 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h1><ul>\n<li><p>chrome &amp; chrome 插件<br>划词翻译<br>web 前端助手（FeHelper）</p>\n</li>\n<li><p>可能需要用到的<br>MacBooster 7（清理垃圾、内存）<br>Dr. Unarchiver（解压）<br>iStatistica（查看内存、网络、网速、等等）</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>Sourcetree（git）</li>\n<li>SmartSVN（svn）</li>\n<li>微信开发者工具</li>\n<li>Navicat Premium（数据库）</li>\n<li>Sublime Text3（编辑器）</li>\n<li>MAMP PRO（服务器）</li>\n<li>Postman（接口）</li>\n<li>Charles（抓包）</li>\n<li>Vscode（编译器）</li>\n</ul>\n<hr>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"vscode\"><a href=\"#vscode\" class=\"headerlink\" title=\"vscode\"></a>vscode</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"editor.detectIndentation\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"comment\">// 重新设定 tabsize</span></span><br><span class=\"line\"><span class=\"string\">\"editor.tabSize\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"comment\">// #每次保存的时候自动格式化</span></span><br><span class=\"line\"><span class=\"string\">\"editor.formatOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"comment\">// #每次保存的时候将代码按 eslint 格式进行修复</span></span><br><span class=\"line\"><span class=\"string\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"comment\">// 添加 vue 支持</span></span><br><span class=\"line\"><span class=\"string\">\"eslint.validate\"</span>: [</span><br><span class=\"line\"><span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">],</span><br><span class=\"line\"><span class=\"comment\">// #让 prettier 使用 eslint 的代码格式进行校验</span></span><br><span class=\"line\"><span class=\"string\">\"prettier.eslintIntegration\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"comment\">// #去掉代码结尾的分号</span></span><br><span class=\"line\"><span class=\"string\">\"prettier.semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"comment\">// #使用带引号替代双引号</span></span><br><span class=\"line\"><span class=\"string\">\"prettier.singleQuote\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"comment\">// #让函数(名)和后面的括号之间加个空格</span></span><br><span class=\"line\"><span class=\"string\">\"javascript.format.insertSpaceBeforeFunctionParenthesis\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"comment\">// #这个按用户自身习惯选择</span></span><br><span class=\"line\"><span class=\"string\">\"vetur.format.defaultFormatter.html\"</span>: <span class=\"string\">\"js-beautify-html\"</span>,</span><br><span class=\"line\"><span class=\"comment\">// #让 vue 中的 js 按编辑器自带的 ts 格式进行格式化</span></span><br><span class=\"line\"><span class=\"string\">\"vetur.format.defaultFormatter.js\"</span>: <span class=\"string\">\"vscode-typescript\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.defaultFormatterOptions\"</span>: &#123;</span><br><span class=\"line\"><span class=\"string\">\"js-beautify-html\"</span>: &#123;</span><br><span class=\"line\"><span class=\"string\">\"wrap_attributes\"</span>: <span class=\"string\">\"force-aligned\"</span></span><br><span class=\"line\"><span class=\"comment\">// #vue 组件中 html 代码格式化样式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 格式化 stylus, 需安装 Manta's Stylus Supremacy 插件</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertColons\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入冒号</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertSemicolons\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入分好</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertBraces\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入大括号</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertNewLineAroundImports\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// import 之后是否换行</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertNewLineAroundBlocks\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 两个选择器中是否换行</span></span><br><span class=\"line\"><span class=\"string\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\"><span class=\"string\">\"plugins\"</span>: [<span class=\"string\">\"html\"</span>]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">\"editor.fontSize\"</span>: <span class=\"number\">13</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>记录我的某些常用软件及配置，方便以后查看。</p>\n</blockquote>","more":"<h1 id=\"破解软件下载地址\"><a href=\"#破解软件下载地址\" class=\"headerlink\" title=\"破解软件下载地址\"></a>破解软件下载地址</h1><p><a href=\"https://xclient.info/\" target=\"_blank\" rel=\"noopener\">精品 MAC 应用分享</a><br><a href=\"https://www.macbl.com/\" target=\"_blank\" rel=\"noopener\">马可菠萝</a></p>\n<h1 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h1><ul>\n<li><p>chrome &amp; chrome 插件<br>划词翻译<br>web 前端助手（FeHelper）</p>\n</li>\n<li><p>可能需要用到的<br>MacBooster 7（清理垃圾、内存）<br>Dr. Unarchiver（解压）<br>iStatistica（查看内存、网络、网速、等等）</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>Sourcetree（git）</li>\n<li>SmartSVN（svn）</li>\n<li>微信开发者工具</li>\n<li>Navicat Premium（数据库）</li>\n<li>Sublime Text3（编辑器）</li>\n<li>MAMP PRO（服务器）</li>\n<li>Postman（接口）</li>\n<li>Charles（抓包）</li>\n<li>Vscode（编译器）</li>\n</ul>\n<hr>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"vscode\"><a href=\"#vscode\" class=\"headerlink\" title=\"vscode\"></a>vscode</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"editor.detectIndentation\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"comment\">// 重新设定 tabsize</span></span><br><span class=\"line\"><span class=\"string\">\"editor.tabSize\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"comment\">// #每次保存的时候自动格式化</span></span><br><span class=\"line\"><span class=\"string\">\"editor.formatOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"comment\">// #每次保存的时候将代码按 eslint 格式进行修复</span></span><br><span class=\"line\"><span class=\"string\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"comment\">// 添加 vue 支持</span></span><br><span class=\"line\"><span class=\"string\">\"eslint.validate\"</span>: [</span><br><span class=\"line\"><span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">],</span><br><span class=\"line\"><span class=\"comment\">// #让 prettier 使用 eslint 的代码格式进行校验</span></span><br><span class=\"line\"><span class=\"string\">\"prettier.eslintIntegration\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"comment\">// #去掉代码结尾的分号</span></span><br><span class=\"line\"><span class=\"string\">\"prettier.semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"comment\">// #使用带引号替代双引号</span></span><br><span class=\"line\"><span class=\"string\">\"prettier.singleQuote\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"comment\">// #让函数(名)和后面的括号之间加个空格</span></span><br><span class=\"line\"><span class=\"string\">\"javascript.format.insertSpaceBeforeFunctionParenthesis\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"comment\">// #这个按用户自身习惯选择</span></span><br><span class=\"line\"><span class=\"string\">\"vetur.format.defaultFormatter.html\"</span>: <span class=\"string\">\"js-beautify-html\"</span>,</span><br><span class=\"line\"><span class=\"comment\">// #让 vue 中的 js 按编辑器自带的 ts 格式进行格式化</span></span><br><span class=\"line\"><span class=\"string\">\"vetur.format.defaultFormatter.js\"</span>: <span class=\"string\">\"vscode-typescript\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.defaultFormatterOptions\"</span>: &#123;</span><br><span class=\"line\"><span class=\"string\">\"js-beautify-html\"</span>: &#123;</span><br><span class=\"line\"><span class=\"string\">\"wrap_attributes\"</span>: <span class=\"string\">\"force-aligned\"</span></span><br><span class=\"line\"><span class=\"comment\">// #vue 组件中 html 代码格式化样式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 格式化 stylus, 需安装 Manta's Stylus Supremacy 插件</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertColons\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入冒号</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertSemicolons\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入分好</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertBraces\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入大括号</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertNewLineAroundImports\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// import 之后是否换行</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertNewLineAroundBlocks\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 两个选择器中是否换行</span></span><br><span class=\"line\"><span class=\"string\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\"><span class=\"string\">\"plugins\"</span>: [<span class=\"string\">\"html\"</span>]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">\"editor.fontSize\"</span>: <span class=\"number\">13</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjvz0jegz0000yrwmgkryst1z","category_id":"cjvz0jeh80004yrwm5f70e5x4","_id":"cjvz0jehg000cyrwmums2owtb"},{"post_id":"cjvz0jeh50002yrwm26qawge1","category_id":"cjvz0jehf000ayrwm3yv9wyuv","_id":"cjvz0jehj000iyrwmotap8o5i"},{"post_id":"cjvz0jehb0006yrwmqx0vyd2e","category_id":"cjvz0jehf000ayrwm3yv9wyuv","_id":"cjvz0jehj000kyrwmcf3vsb6b"},{"post_id":"cjvz0jehd0008yrwmdu4o8pi1","category_id":"cjvz0jehi000hyrwm82hjthh3","_id":"cjvz0jehk000myrwmltw1mtbz"}],"PostTag":[{"post_id":"cjvz0jegz0000yrwmgkryst1z","tag_id":"cjvz0jeha0005yrwmcswsmjsp","_id":"cjvz0jehi000fyrwm12dyrm1z"},{"post_id":"cjvz0jegz0000yrwmgkryst1z","tag_id":"cjvz0jehf000byrwm7obhjgpd","_id":"cjvz0jehi000gyrwm67fds16v"},{"post_id":"cjvz0jeh50002yrwm26qawge1","tag_id":"cjvz0jehg000eyrwmuedsq4qg","_id":"cjvz0jehk000pyrwm40ltv9td"},{"post_id":"cjvz0jeh50002yrwm26qawge1","tag_id":"cjvz0jehf000byrwm7obhjgpd","_id":"cjvz0jehl000qyrwmmxfcfqlf"},{"post_id":"cjvz0jeh50002yrwm26qawge1","tag_id":"cjvz0jehj000lyrwmz13iqixf","_id":"cjvz0jehl000syrwm00txvsv3"},{"post_id":"cjvz0jeh50002yrwm26qawge1","tag_id":"cjvz0jehk000nyrwmxgrobqwx","_id":"cjvz0jehl000tyrwm8v2mswhv"},{"post_id":"cjvz0jehb0006yrwmqx0vyd2e","tag_id":"cjvz0jehg000eyrwmuedsq4qg","_id":"cjvz0jehm000xyrwm0v159893"},{"post_id":"cjvz0jehb0006yrwmqx0vyd2e","tag_id":"cjvz0jehf000byrwm7obhjgpd","_id":"cjvz0jehm000yyrwm2ct4gtrs"},{"post_id":"cjvz0jehb0006yrwmqx0vyd2e","tag_id":"cjvz0jehj000lyrwmz13iqixf","_id":"cjvz0jehn0010yrwm3uw1ings"},{"post_id":"cjvz0jehb0006yrwmqx0vyd2e","tag_id":"cjvz0jehk000nyrwmxgrobqwx","_id":"cjvz0jehn0011yrwmrqgftlcb"},{"post_id":"cjvz0jehd0008yrwmdu4o8pi1","tag_id":"cjvz0jehm000wyrwm6z5cog5y","_id":"cjvz0jehn0012yrwm8wk19yqt"},{"post_id":"cjvz0jehe0009yrwmdytjlb9l","tag_id":"cjvz0jehm000zyrwmrjf44n2i","_id":"cjvz0jehn0013yrwm8tl6emft"},{"post_id":"cjvz0jehe0009yrwmdytjlb9l","tag_id":"cjvz11hfu0017yrwmfek56ygx","_id":"cjvz11hfu0018yrwmsm89ja4b"}],"Tag":[{"name":"hexo","_id":"cjvz0jeha0005yrwmcswsmjsp"},{"name":"技术","_id":"cjvz0jehf000byrwm7obhjgpd"},{"name":"javascript","_id":"cjvz0jehg000eyrwmuedsq4qg"},{"name":"面试","_id":"cjvz0jehj000lyrwmz13iqixf"},{"name":"笔记","_id":"cjvz0jehk000nyrwmxgrobqwx"},{"name":"情感","_id":"cjvz0jehm000wyrwm6z5cog5y"},{"name":"配置","_id":"cjvz0jehm000zyrwmrjf44n2i"},{"name":"软件","_id":"cjvz11b6h0015yrwm6kjxm7g9"},{"name":"软件下载","_id":"cjvz11hfu0017yrwmfek56ygx"}]}}